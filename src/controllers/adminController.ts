import { Bot, Composer, InlineKeyboard } from "grammy";
import type { MyContext } from "../index";
import { keyboardService } from "../services/keyboardService";
import { handleErrorWithContext } from '../utils/errorHandler';
import { UserRepository } from "../db/repositories/userRepository";
import { ApplicationRepository } from "../db/repositories/applicationRepository";
import { SystemSettingsRepository } from "../db/repositories/systemSettingsRepository";
import { ApplicationStatus, UserRole } from "../models/types";
import type { User } from "../models/types";
import { messageService } from '../services/messageService';
import { logger } from '../utils/logger';
import { getBotInstance } from './applicationController';
import { QuestionRepository } from "../db/repositories/questionRepository";
import { MinecraftService } from "../services/minecraftService";
import { UserUtils } from '../utils/userUtils';
import { ButtonComponents } from '../components/buttons';
import { RoleManager } from '../components/roles';

// –°–æ–∑–¥–∞–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
const userRepository = new UserRepository();
const applicationRepository = new ApplicationRepository();
const systemSettingsRepository = new SystemSettingsRepository();

// –°–æ–∑–¥–∞–µ–º –∫–æ–º–ø–æ–∑–µ—Ä –¥–ª—è –∞–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥
const adminController = new Composer<MyContext>();

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (middleware)
const adminMiddleware = async (ctx: MyContext, next: () => Promise<void>) => {
  try {
    if (!ctx.from) {
      return await ctx.reply("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.");
    }

    const user = await userRepository.findByTelegramId(ctx.from.id);
    
    if (!RoleManager.isAdmin(user)) {
      return await UserUtils.handleAccessDenied(
        ctx, 
        'adminController.adminMiddleware', 
        { telegramId: ctx.from.id, username: ctx.from?.username, role: user?.role }
      );
    }
    
    await next();
  } catch (error) {
    await handleErrorWithContext(ctx, error, "adminMiddleware");
  }
};

// –ü—Ä–∏–º–µ–Ω—è–µ–º middleware –∫–æ –≤—Å–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º –≤ —ç—Ç–æ–º –∫–æ–º–ø–æ–∑–µ—Ä–µ
adminController.use(adminMiddleware);

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ Markdown
function escapeMarkdown(text: string): string {
  if (!text) return '';
  // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã Markdown: * _ ` [ ]
  return text.replace(/([*_`\[\]])/g, '\\$1');
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
adminController.callbackQuery("admin_users", async (ctx) => {
  try {
    await ctx.answerCallbackQuery();
    
    const users = await userRepository.findAll();
    
    if (users.length === 0) {
      await ctx.reply("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.");
      return;
    }
    
    await ctx.reply("üë• *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:", { parse_mode: "Markdown" });

// –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∑–∞—è–≤–∏—Ç–µ–ª—å -> —É—á–∞—Å—Ç–Ω–∏–∫)
adminController.callbackQuery(/^confirm_user_(\d+)$/, async (ctx) => {
  try {
    await ctx.answerCallbackQuery();
    
    const userId = parseInt(ctx.match?.[1] || '0');
    const user = await userRepository.findById(userId);
    
    if (!user) {
      await ctx.reply("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.");
      return;
    }
    
    if (!RoleManager.isApplicant(user)) {
      await ctx.reply("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω.");
      return;
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–æ–ª—å –Ω–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏ –¥–∞–µ–º –ø—Ä–∞–≤–æ –≥–æ–ª–æ—Å–∞
    await userRepository.update(userId, {
      role: RoleManager.ROLES.MEMBER,
      canVote: true
    });
    
    // –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç UUID, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –µ–≥–æ
    if (!user.minecraftUUID) {
      const minecraftService = new MinecraftService();
      const offlineUUID = minecraftService.generateOfflineUUID(user.minecraftNickname);
      await userRepository.update(userId, { minecraftUUID: offlineUUID });
      
      // –î–æ–±–∞–≤–ª—è–µ–º –≤ whitelist
      const addedToWhitelist = await minecraftService.addToWhitelist(
        user.minecraftNickname, 
        offlineUUID,
        userId
      );
      
      const message = `‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${escapeMarkdown(user.minecraftNickname)} —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!\n\n` +
                     `–†–æ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: üë§ –£—á–∞—Å—Ç–Ω–∏–∫\n` +
                     `–ü—Ä–∞–≤–æ –≥–æ–ª–æ—Å–∞: ‚úÖ –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ\n` +
                     `UUID: \`${offlineUUID}\`\n\n` +
                     `${addedToWhitelist ? '‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –≤ whitelist —Å–µ—Ä–≤–µ—Ä–∞' : '‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –≤ whitelist'}`;
      
      await ctx.reply(message, { parse_mode: "Markdown" });
    } else {
      await ctx.reply(
        `‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${escapeMarkdown(user.minecraftNickname)} —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!\n\n` +
        `–†–æ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: üë§ –£—á–∞—Å—Ç–Ω–∏–∫\n` +
        `–ü—Ä–∞–≤–æ –≥–æ–ª–æ—Å–∞: ‚úÖ –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ`,
        { parse_mode: "Markdown" }
      );
    }
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    if (getBotInstance()) {
      try {
        const bot = getBotInstance();
        if (bot) {
          await bot.api.sendMessage(
            Number(user.telegramId),
            `üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã –∫–∞–∫ —É—á–∞—Å—Ç–Ω–∏–∫ —Å–µ—Ä–≤–µ—Ä–∞.\n\n` +
            `–¢–µ–ø–µ—Ä—å —É –≤–∞—Å –µ—Å—Ç—å –ø—Ä–∞–≤–æ –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å –ø–æ –∑–∞—è–≤–∫–∞–º –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤ –∏ –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞.`
          );
        }
      } catch (error) {
        logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}:`, error);
      }
    }
    
  } catch (error) {
    await handleErrorWithContext(ctx, error, "confirmUser");
  }
});

// –ü–æ–≤—ã—à–µ–Ω–∏–µ –¥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
adminController.callbackQuery(/^promote_user_(\d+)$/, async (ctx) => {
  try {
    await ctx.answerCallbackQuery();
    
    const userId = parseInt(ctx.match?.[1] || '0');
    const user = await userRepository.findById(userId);
    
    await userRepository.updateRole(userId, RoleManager.ROLES.MEMBER);
    
    await ctx.reply(
      `‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${escapeMarkdown(user.minecraftNickname)} –ø–æ–≤—ã—à–µ–Ω –¥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞.`,
      { parse_mode: "Markdown" }
    );
  } catch (error) {
    await handleErrorWithContext(ctx, error, "promoteUser");
  }
});

// –ü–æ–Ω–∏–∂–µ–Ω–∏–µ –¥–æ –∑–∞—è–≤–∏—Ç–µ–ª—è
adminController.callbackQuery(/^demote_user_(\d+)$/, async (ctx) => {
  try {
    await ctx.answerCallbackQuery();
    
    const userId = parseInt(ctx.match?.[1] || '0');
    const user = await userRepository.findById(userId);
    
    await userRepository.update(userId, {
      role: RoleManager.ROLES.APPLICANT,
      canVote: false
    });
    
    await ctx.reply(
      `‚¨áÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${escapeMarkdown(user.minecraftNickname)} –ø–æ–Ω–∏–∂–µ–Ω –¥–æ –∑–∞—è–≤–∏—Ç–µ–ª—è.`,
      { parse_mode: "Markdown" }
    );
  } catch (error) {
    await handleErrorWithContext(ctx, error, "demoteUser");
  }
});

// –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
adminController.callbackQuery(/^make_admin_(\d+)$/, async (ctx) => {
  try {
    await ctx.answerCallbackQuery();
    
    const userId = parseInt(ctx.match?.[1] || '0');
    const user = await userRepository.findById(userId);
    
    await userRepository.update(userId, {
      role: RoleManager.ROLES.ADMIN,
      canVote: true
    });
    
    await ctx.reply(
      `üëë –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${escapeMarkdown(user.minecraftNickname)} –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.`,
      { parse_mode: "Markdown" }
    );
  } catch (error) {
    await handleErrorWithContext(ctx, error, "makeAdmin");
  }
});

// –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–∞ –≥–æ–ª–æ—Å–∞
adminController.callbackQuery(/^give_vote_(\d+)$/, async (ctx) => {
  try {
    await ctx.answerCallbackQuery();
    
    const userId = parseInt(ctx.match?.[1] || '0');
    const user = await userRepository.findById(userId);
    
    await userRepository.updateCanVote(userId, true);
    
    await ctx.reply(
      `üó≥Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${escapeMarkdown(user.minecraftNickname)} –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –ø—Ä–∞–≤–æ –≥–æ–ª–æ—Å–∞.`,
      { parse_mode: "Markdown" }
    );
  } catch (error) {
    await handleErrorWithContext(ctx, error, "giveVote");
  }
});

// –û—Ç–∑—ã–≤ –ø—Ä–∞–≤–∞ –≥–æ–ª–æ—Å–∞
adminController.callbackQuery(/^remove_vote_(\d+)$/, async (ctx) => {
  try {
    await ctx.answerCallbackQuery();
    
    const userId = parseInt(ctx.match?.[1] || '0');
    const user = await userRepository.findById(userId);
    
    await userRepository.updateCanVote(userId, false);
    
    await ctx.reply(
      `üö´ –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${escapeMarkdown(user.minecraftNickname)} –æ—Ç–æ–∑–≤–∞–Ω–æ –ø—Ä–∞–≤–æ –≥–æ–ª–æ—Å–∞.`,
      { parse_mode: "Markdown" }
    );
  } catch (error) {
    await handleErrorWithContext(ctx, error, "removeVote");
  }
});

// –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ whitelist
adminController.callbackQuery(/^remove_whitelist_(\d+)$/, async (ctx) => {
  try {
    await ctx.answerCallbackQuery();
    
    const userId = parseInt(ctx.match?.[1] || '0');
    const user = await userRepository.findById(userId);
    
    if (!user.minecraftUUID) {
      await ctx.reply("‚ö†Ô∏è –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç UUID –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ whitelist.");
      return;
    }
    
    const minecraftService = new MinecraftService();
    const removedFromWhitelist = await minecraftService.removeFromWhitelist(
      user.minecraftNickname, 
      user.minecraftUUID,
      userId
    );
    
    if (removedFromWhitelist) {
      // –¢–∞–∫–∂–µ –ø–æ–Ω–∏–∂–∞–µ–º —Ä–æ–ª—å –¥–æ –∑–∞—è–≤–∏—Ç–µ–ª—è –∏ —É–±–∏—Ä–∞–µ–º –ø—Ä–∞–≤–æ –≥–æ–ª–æ—Å–∞
      await userRepository.update(userId, {
        role: RoleManager.ROLES.APPLICANT,
        canVote: false
      });
      
      await ctx.reply(
        `üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${escapeMarkdown(user.minecraftNickname)} —É–¥–∞–ª–µ–Ω –∏–∑ whitelist —Å–µ—Ä–≤–µ—Ä–∞.\n\n` +
        `–†–æ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: üìù –ó–∞—è–≤–∏—Ç–µ–ª—å\n` +
        `–ü—Ä–∞–≤–æ –≥–æ–ª–æ—Å–∞: ‚ùå –û—Ç–æ–∑–≤–∞–Ω–æ`,
        { parse_mode: "Markdown" }
      );
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      if (getBotInstance()) {
        try {
          const bot = getBotInstance();
          if (bot) {
            await bot.api.sendMessage(
              Number(user.telegramId),
              `‚ö†Ô∏è –í—ã –±—ã–ª–∏ –∏—Å–∫–ª—é—á–µ–Ω—ã –∏–∑ whitelist —Å–µ—Ä–≤–µ—Ä–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n\n` +
              `–í–∞—à–∞ —Ä–æ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ "–ó–∞—è–≤–∏—Ç–µ–ª—å". –î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.`
            );
          }
        } catch (error) {
          logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}:`, error);
        }
      }
    } else {
      await ctx.reply(
        `‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${escapeMarkdown(user.minecraftNickname)} –∏–∑ whitelist. –í–æ–∑–º–æ–∂–Ω–æ, —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.`,
        { parse_mode: "Markdown" }
      );
    }
  } catch (error) {
    await handleErrorWithContext(ctx, error, "removeWhitelist");
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
adminController.callbackQuery(/^manage_user_(\d+)$/, async (ctx) => {
  try {
    await ctx.answerCallbackQuery();
    
    const userId = parseInt(ctx.match?.[1] || '0');
    const user = await userRepository.findById(userId);
    
    if (!user) {
      await ctx.reply("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.");
      return;
    }
    
    const roleText = RoleManager.isAdmin(user) ? 'üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä' : 
                    RoleManager.isMember(user) ? 'üë§ –£—á–∞—Å—Ç–Ω–∏–∫' : 'üìù –ó–∞—è–≤–∏—Ç–µ–ª—å';
    const voteText = user.canVote ? '‚úÖ –ï—Å—Ç—å' : '‚ùå –ù–µ—Ç';
    
    const message = `üë§ *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º*\n\n` +
                   `*–ù–∏–∫–Ω–µ–π–º:* ${escapeMarkdown(user.minecraftNickname)}\n` +
                   `*Telegram:* ${user.username ? '@' + escapeMarkdown(user.username) : '–ù–µ —É–∫–∞–∑–∞–Ω'}\n` +
                   `*–†–æ–ª—å:* ${roleText}\n` +
                   `*–ü—Ä–∞–≤–æ –≥–æ–ª–æ—Å–∞:* ${voteText}\n` +
                   `*–†–µ–ø—É—Ç–∞—Ü–∏—è:* ${user.reputation}\n` +
                   `*UUID:* ${user.minecraftUUID ? '`' + user.minecraftUUID + '`' : '–ù–µ —É–∫–∞–∑–∞–Ω'}`;
    
    const keyboard = new InlineKeyboard();
    
    // –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–æ–ª—å—é
    if (RoleManager.isApplicant(user)) {
      keyboard.text("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", `confirm_user_${userId}`).row();
    }
    
    if (!RoleManager.isAdmin(user)) {
      if (RoleManager.isMember(user)) {
        keyboard.text("üìù –°–¥–µ–ª–∞—Ç—å –∑–∞—è–≤–∏—Ç–µ–ª–µ–º", `demote_user_${userId}`);
      } else {
        keyboard.text("üë§ –°–¥–µ–ª–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º", `promote_user_${userId}`);
      }
      keyboard.text("üëë –°–¥–µ–ª–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º", `make_admin_${userId}`).row();
    }
    
    // –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∞–≤–æ–º –≥–æ–ª–æ—Å–∞
    if (user.canVote) {
      keyboard.text("üö´ –£–±—Ä–∞—Ç—å –ø—Ä–∞–≤–æ –≥–æ–ª–æ—Å–∞", `remove_vote_${userId}`);
    } else {
      keyboard.text("üó≥Ô∏è –î–∞—Ç—å –ø—Ä–∞–≤–æ –≥–æ–ª–æ—Å–∞", `give_vote_${userId}`);
    }
    keyboard.row();
    
    // –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ whitelist (—Ç–æ–ª—å–∫–æ –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏ –∑–∞—è–≤–∏—Ç–µ–ª–µ–π)
    if (!RoleManager.isAdmin(user) && user.minecraftUUID) {
      keyboard.text("üö´ –£–¥–∞–ª–∏—Ç—å –∏–∑ whitelist", `remove_whitelist_${userId}`).row();
    }
    
    keyboard.text("üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", "admin_users");
    
    await ctx.reply(message, { 
      reply_markup: keyboard,
      parse_mode: "Markdown" 
    });
  } catch (error) {
    await handleErrorWithContext(ctx, error, "manageUser");
  }
});
    
    // –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const keyboard = new InlineKeyboard();
    
    for (const user of users) {
      const roleIcon = RoleManager.isAdmin(user) ? 'üëë' : 
                      RoleManager.isMember(user) ? 'üë§' : 'üìù';
      const voteIcon = user.canVote ? 'üó≥Ô∏è' : 'üö´';
      const displayName = `${roleIcon} ${user.minecraftNickname} ${voteIcon}`;
      
      keyboard.text(displayName, `manage_user_${user.id}`).row();
    }
    
    keyboard.text("üîô –ù–∞–∑–∞–¥", "admin_back_to_main");
    
    await ctx.reply("–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:", { reply_markup: keyboard });
  } catch (error) {
    await handleErrorWithContext(ctx, error, "adminUsersList");
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∞–º–∏
adminController.callbackQuery("admin_applications", async (ctx) => {
  try {
    await ctx.answerCallbackQuery();
    
    const applications = await applicationRepository.findVotingApplications();
    
    if (applications.length === 0) {
      await ctx.reply("üìù –ù–µ—Ç –∑–∞—è–≤–æ–∫, –æ–∂–∏–¥–∞—é—â–∏—Ö —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è.");
      
      const keyboard = new InlineKeyboard()
        .text("üîô –ù–∞–∑–∞–¥", "admin_back_to_main");
      
      await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", { reply_markup: keyboard });
      return;
    }
    
    let message = "üìù *–ó–∞—è–≤–∫–∏, –æ–∂–∏–¥–∞—é—â–∏–µ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è:*\n\n";
    
    // –î–ª—è –∫–∞–∂–¥–æ–π –∑–∞—è–≤–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–µ–π—Å—Ç–≤–∏–π
    for (const application of applications) {
      const user = await userRepository.findById(application.userId);
      
      const applicationInfo = `*–ó–∞—è–≤–∫–∞ #${application.id}* - ${escapeMarkdown(application.minecraftNickname)}${user.username ? ` (@${escapeMarkdown(user.username)})` : ''}\n` +
                              `*–°—Ç–∞—Ç—É—Å:* ${application.status === ApplicationStatus.PENDING ? '‚è≥ –û–∂–∏–¥–∞–µ—Ç' : 
                                        application.status === ApplicationStatus.VOTING ? 'üó≥Ô∏è –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ' : 
                                        application.status === ApplicationStatus.APPROVED ? '‚úÖ –û–¥–æ–±—Ä–µ–Ω–∞' : 
                                        application.status === ApplicationStatus.REJECTED ? '‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–∞' : 
                                        application.status === ApplicationStatus.EXPIRED ? '‚è∞ –ò—Å—Ç–µ–∫–ª–∞' : 
                                        '‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n` +
                              `*–ü—Ä–∏—á–∏–Ω–∞:* ${escapeMarkdown(application.reason.substring(0, 100))}${application.reason.length > 100 ? '...' : ''}`;
      
      // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞—è–≤–∫–∏
      const keyboard = new InlineKeyboard();
      
      // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏
      if (application.status === ApplicationStatus.PENDING) {
        keyboard
          .text("üó≥Ô∏è –ù–∞—á–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ", `app_start_voting_${application.id}`).row()
          .text("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", `app_approve_${application.id}`)
          .text("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", `app_reject_${application.id}`).row();
      } else if (application.status === ApplicationStatus.VOTING) {
        keyboard
          .text("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", `app_approve_${application.id}`)
          .text("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", `app_reject_${application.id}`).row();
      }
      
      keyboard.text("üîç –ü–æ–¥—Ä–æ–±–Ω–µ–µ", `app_view_${application.id}`).row();
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞—è–≤–∫–µ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –¥–µ–π—Å—Ç–≤–∏–π
      await ctx.reply(applicationInfo, { 
        reply_markup: keyboard,
        parse_mode: "Markdown" 
      });
    }
    
    // –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞–∑–∞–¥
    const backKeyboard = new InlineKeyboard()
      .text("üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", "admin_back");
    
    await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", { reply_markup: backKeyboard });
  } catch (error) {
    await handleErrorWithContext(ctx, error, "adminApplications");
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
adminController.callbackQuery("admin_settings", async (ctx) => {
  try {
    await ctx.answerCallbackQuery();
    
    const settings = await systemSettingsRepository.getSettings();
    
    const message = "‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞:*\n\n" +
                    `*–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è:* ${messageService.formatDuration(
                      settings.votingDurationDays,
                      settings.votingDurationHours,
                      settings.votingDurationMinutes
                    )}\n` +
                    `*–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª-–≤–æ –≥–æ–ª–æ—Å–æ–≤:* ${settings.minVotesRequired}\n` +
                    `*–ü–æ—Ä–æ–≥ –æ—Ç—Ä–∏—Ü. –æ—Ü–µ–Ω–æ–∫:* ${settings.negativeRatingsThreshold}`;
    
    // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
    const keyboard = new InlineKeyboard()
      .text("‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è", "settings_voting_duration").row()
      .text("üî¢ –ú–∏–Ω. –∫–æ–ª-–≤–æ –≥–æ–ª–æ—Å–æ–≤", "settings_min_votes").row()
      .text("üëé –ü–æ—Ä–æ–≥ –æ—Ç—Ä–∏—Ü. –æ—Ü–µ–Ω–æ–∫", "settings_neg_threshold").row()
      .text("üîô –ù–∞–∑–∞–¥", "admin_back_to_main").row();
    
    await ctx.reply(message, { 
      reply_markup: keyboard,
      parse_mode: "Markdown"
    });
  } catch (error) {
    await handleErrorWithContext(ctx, error, "adminSettings");
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
adminController.callbackQuery("settings_voting_duration", async (ctx) => {
  try {
    await ctx.answerCallbackQuery();
    
    const settings = await systemSettingsRepository.getSettings();
    
    // –°–æ—Ö—Ä–∞–Ω–∏–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ —Å–µ—Å—Å–∏–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    if (ctx.session) {
      ctx.session.votingSettings = {
        days: settings.votingDurationDays,
        hours: settings.votingDurationHours,
        minutes: settings.votingDurationMinutes
      };
    }
    
    const keyboard = keyboardService.getVotingSettingsKeyboard(
      settings.votingDurationDays,
      settings.votingDurationHours,
      settings.votingDurationMinutes
    );
    
    await ctx.reply(
      "‚è±Ô∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è*\n\n" +
      "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏–π:",
      { 
        reply_markup: keyboard,
        parse_mode: "Markdown"
      }
    );
  } catch (error) {
    await handleErrorWithContext(ctx, error, "settingsVotingDuration");
  }
});

// –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
adminController.callbackQuery("admin_back_to_main", async (ctx) => {
  try {
    await ctx.answerCallbackQuery();
    
    const keyboard = keyboardService.getAdminPanelKeyboard();
    
    await ctx.editMessageText(
      "üõ†Ô∏è –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n" +
      "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
      { 
        reply_markup: keyboard
      }
    );
  } catch (error) {
    await handleErrorWithContext(ctx, error, "adminBackToMain");
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–Ω–µ–π –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
adminController.callbackQuery(/^voting_days_(plus|minus)$/, async (ctx) => {
  try {
    await ctx.answerCallbackQuery();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    if (!ctx.session) ctx.session = {};
    if (!ctx.session.votingSettings) {
      ctx.session.votingSettings = { days: 1, hours: 0, minutes: 0 };
    }
    
    const action = ctx.match[1];
    
    if (action === 'plus' && ctx.session.votingSettings.days < 30) {
      ctx.session.votingSettings.days++;
    } else if (action === 'minus' && ctx.session.votingSettings.days > 0) {
      ctx.session.votingSettings.days--;
    }
    
    await updateVotingTimeMessage(ctx);
  } catch (error) {
    await handleErrorWithContext(ctx, error, "votingDaysUpdate");
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —á–∞—Å–æ–≤ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
adminController.callbackQuery(/^voting_hours_(plus|minus)$/, async (ctx) => {
  try {
    await ctx.answerCallbackQuery();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    if (!ctx.session) ctx.session = {};
    if (!ctx.session.votingSettings) {
      ctx.session.votingSettings = { days: 0, hours: 12, minutes: 0 };
    }
    
    const action = ctx.match[1];
    
    if (action === 'plus' && ctx.session.votingSettings.hours < 23) {
      ctx.session.votingSettings.hours++;
    } else if (action === 'minus' && ctx.session.votingSettings.hours > 0) {
      ctx.session.votingSettings.hours--;
    }
    
    await updateVotingTimeMessage(ctx);
  } catch (error) {
    await handleErrorWithContext(ctx, error, "votingHoursUpdate");
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –º–∏–Ω—É—Ç –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
adminController.callbackQuery(/^voting_minutes_(plus|minus)$/, async (ctx) => {
  try {
    await ctx.answerCallbackQuery();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    if (!ctx.session) ctx.session = {};
    if (!ctx.session.votingSettings) {
      ctx.session.votingSettings = { days: 0, hours: 0, minutes: 30 };
    }
    
    const action = ctx.match[1];
    
    if (action === 'plus' && ctx.session.votingSettings.minutes < 59) {
      ctx.session.votingSettings.minutes++;
    } else if (action === 'minus' && ctx.session.votingSettings.minutes > 0) {
      ctx.session.votingSettings.minutes--;
    }
    
    await updateVotingTimeMessage(ctx);
  } catch (error) {
    await handleErrorWithContext(ctx, error, "votingMinutesUpdate");
  }
});

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤—Ä–µ–º–µ–Ω–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
adminController.callbackQuery("voting_time_save", async (ctx) => {
  try {
    await ctx.answerCallbackQuery();
    
    if (!ctx.session?.votingSettings) {
      await ctx.reply("‚ùå –û—à–∏–±–∫–∞: –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.");
      return;
    }
    
    const { days, hours, minutes } = ctx.session.votingSettings;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ –±–æ–ª—å—à–µ –Ω—É–ª—è
    if (days === 0 && hours === 0 && minutes === 0) {
      await ctx.reply("‚ö†Ô∏è –í—Ä–µ–º—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω—É–ª–µ–≤—ã–º.");
      return;
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    await systemSettingsRepository.updateVotingDuration(days, hours, minutes);
    
    await ctx.reply(
      "‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:\n\n" +
      `–ù–æ–≤–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${messageService.formatDuration(days, hours, minutes)}`
    );
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
    const keyboard = new InlineKeyboard()
      .text("üîô –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", "admin_settings");
    
    await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", { reply_markup: keyboard });
  } catch (error) {
    await handleErrorWithContext(ctx, error, "votingSaveSettings");
  }
});

// –í–æ–∑–≤—Ä–∞—Ç –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –∏–∑ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
adminController.callbackQuery("voting_back", async (ctx) => {
  try {
    await ctx.answerCallbackQuery();
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
    await ctx.editMessageText(
      "‚öôÔ∏è –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫...",
      { reply_markup: { inline_keyboard: [] } }
    );
    
    // –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    await adminController.middleware()(
      { ...ctx, callbackQuery: { data: "admin_settings" } } as any,
      async () => {}
    );
  } catch (error) {
    await handleErrorWithContext(ctx, error, "votingBackToSettings");
  }
});

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –≤—Ä–µ–º–µ–Ω–∏
async function updateVotingTimeMessage(ctx: MyContext) {
  try {
    if (!ctx.session?.votingSettings) return;
    
    const { days, hours, minutes } = ctx.session.votingSettings;
    
    const keyboard = keyboardService.getVotingSettingsKeyboard(days, hours, minutes);
    
    const formattedDuration = messageService.formatDuration(days, hours, minutes);
    
    try {
      await ctx.editMessageText(
        "‚è±Ô∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è*\n\n" +
        `–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: ${formattedDuration}\n\n` +
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏–π:",
        { 
          reply_markup: keyboard,
          parse_mode: "Markdown"
        }
      );
    } catch (editError: any) {
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—à–∏–±–∫—É –æ –Ω–µ–∏–∑–º–µ–Ω–µ–Ω–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
      if (editError.description && editError.description.includes('message is not modified')) {
        // –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –Ω–∏—á–µ–≥–æ –¥–µ–ª–∞—Ç—å –Ω–µ –Ω—É–∂–Ω–æ
        logger.debug('–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ');
      } else {
        // –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –æ—à–∏–±–∫–∏
        throw editError;
      }
    }
  } catch (error) {
    logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –≤—Ä–µ–º–µ–Ω–∏:", error);
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≥–æ–ª–æ—Å–æ–≤
adminController.callbackQuery("settings_min_votes", async (ctx) => {
  try {
    await ctx.answerCallbackQuery();
    
    const settings = await systemSettingsRepository.getSettings();
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Å–µ—Å—Å–∏–∏
    if (ctx.session) {
      ctx.session.minVotesRequired = settings.minVotesRequired;
    }
    
    const keyboard = keyboardService.getMinVotesSettingsKeyboard(settings.minVotesRequired);
    
    await ctx.reply(
      "üî¢ *–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≥–æ–ª–æ—Å–æ–≤*\n\n" +
      "–≠—Ç–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–æ—Å–æ–≤, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏—è –ø–æ –∑–∞—è–≤–∫–µ.\n\n" +
      `–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: ${settings.minVotesRequired}`,
      { 
        reply_markup: keyboard,
        parse_mode: "Markdown"
      }
    );
  } catch (error) {
    await handleErrorWithContext(ctx, error, "settingsMinVotes");
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≥–æ–ª–æ—Å–æ–≤
adminController.callbackQuery(/^min_votes_(plus|minus)$/, async (ctx) => {
  try {
    await ctx.answerCallbackQuery();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    if (!ctx.session) ctx.session = {};
    if (!ctx.session.minVotesRequired) {
      const settings = await systemSettingsRepository.getSettings();
      ctx.session.minVotesRequired = settings.minVotesRequired;
    }
    
    const action = ctx.match[1];
    
    if (action === 'plus' && ctx.session.minVotesRequired < 20) {
      ctx.session.minVotesRequired++;
    } else if (action === 'minus' && ctx.session.minVotesRequired > 1) {
      ctx.session.minVotesRequired--;
    }
    
    await updateMinVotesMessage(ctx);
  } catch (error) {
    await handleErrorWithContext(ctx, error, "minVotesUpdate");
  }
});

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≥–æ–ª–æ—Å–æ–≤
adminController.callbackQuery("min_votes_save", async (ctx) => {
  try {
    await ctx.answerCallbackQuery();
    
    if (!ctx.session?.minVotesRequired) {
      await ctx.reply("‚ùå –û—à–∏–±–∫–∞: –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.");
      return;
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    await systemSettingsRepository.updateMinVotesRequired(ctx.session.minVotesRequired);
    
    await ctx.reply(
      "‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≥–æ–ª–æ—Å–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:\n\n" +
      `–ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: ${ctx.session.minVotesRequired}`
    );
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
    const keyboard = new InlineKeyboard()
      .text("üîô –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", "admin_settings");
    
    await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", { reply_markup: keyboard });
  } catch (error) {
    await handleErrorWithContext(ctx, error, "minVotesSaveSettings");
  }
});

// –í–æ–∑–≤—Ä–∞—Ç –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –∏–∑ –º–µ–Ω—é –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≥–æ–ª–æ—Å–æ–≤
adminController.callbackQuery(/^admin_settings$/, async (ctx) => {
  try {
    await ctx.answerCallbackQuery();
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
    await ctx.editMessageText(
      "‚öôÔ∏è –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫...",
      { reply_markup: { inline_keyboard: [] } }
    );
    
    // –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    await adminController.middleware()(
      { ...ctx, callbackQuery: { data: "admin_settings" } } as any,
      async () => {}
    );
  } catch (error) {
    await handleErrorWithContext(ctx, error, "backToSettings");
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ—Ä–æ–≥–∞ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –æ—Ü–µ–Ω–æ–∫
adminController.callbackQuery("settings_neg_threshold", async (ctx) => {
  try {
    await ctx.answerCallbackQuery();
    
    const settings = await systemSettingsRepository.getSettings();
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Å–µ—Å—Å–∏–∏
    if (ctx.session) {
      ctx.session.negativeThreshold = settings.negativeRatingsThreshold;
    }
    
    const keyboard = keyboardService.getNegativeThresholdSettingsKeyboard(settings.negativeRatingsThreshold);
    
    await ctx.reply(
      "üëé *–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ—Ä–æ–≥–∞ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –æ—Ü–µ–Ω–æ–∫*\n\n" +
      "–≠—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –æ—Ü–µ–Ω–æ–∫, –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –∫–æ—Ç–æ—Ä–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫ –±—É–¥–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω –∏–∑ —Å–µ—Ä–≤–µ—Ä–∞.\n\n" +
      `–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: ${settings.negativeRatingsThreshold}`,
      { 
        reply_markup: keyboard,
        parse_mode: "Markdown"
      }
    );
  } catch (error) {
    await handleErrorWithContext(ctx, error, "settingsNegThreshold");
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ—Ä–æ–≥–∞ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –æ—Ü–µ–Ω–æ–∫
adminController.callbackQuery(/^neg_threshold_(plus|minus)$/, async (ctx) => {
  try {
    await ctx.answerCallbackQuery();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    if (!ctx.session) ctx.session = {};
    if (!ctx.session.negativeThreshold) {
      const settings = await systemSettingsRepository.getSettings();
      ctx.session.negativeThreshold = settings.negativeRatingsThreshold;
    }
    
    const action = ctx.match[1];
    
    if (action === 'plus' && ctx.session.negativeThreshold < 50) {
      ctx.session.negativeThreshold++;
    } else if (action === 'minus' && ctx.session.negativeThreshold > 1) {
      ctx.session.negativeThreshold--;
    }
    
    await updateNegThresholdMessage(ctx);
  } catch (error) {
    await handleErrorWithContext(ctx, error, "negThresholdUpdate");
  }
});

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ—Ä–æ–≥–∞ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –æ—Ü–µ–Ω–æ–∫
adminController.callbackQuery("neg_threshold_save", async (ctx) => {
  try {
    await ctx.answerCallbackQuery();
    
    if (!ctx.session?.negativeThreshold) {
      await ctx.reply("‚ùå –û—à–∏–±–∫–∞: –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.");
      return;
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    await systemSettingsRepository.updateNegativeRatingsThreshold(ctx.session.negativeThreshold);
    
    await ctx.reply(
      "‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ—Ä–æ–≥–∞ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –æ—Ü–µ–Ω–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:\n\n" +
      `–ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: ${ctx.session.negativeThreshold}`
    );
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
    const keyboard = new InlineKeyboard()
      .text("üîô –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", "admin_settings");
    
    await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", { reply_markup: keyboard });
  } catch (error) {
    await handleErrorWithContext(ctx, error, "negThresholdSaveSettings");
  }
});

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≥–æ–ª–æ—Å–æ–≤
async function updateMinVotesMessage(ctx: MyContext) {
  try {
    if (!ctx.session?.minVotesRequired) return;
    
    const minVotes = ctx.session.minVotesRequired;
    
    const keyboard = keyboardService.getMinVotesSettingsKeyboard(minVotes);
    
    try {
      await ctx.editMessageText(
        "üî¢ *–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≥–æ–ª–æ—Å–æ–≤*\n\n" +
        "–≠—Ç–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–æ—Å–æ–≤, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏—è –ø–æ –∑–∞—è–≤–∫–µ.\n\n" +
        `–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: ${minVotes}`,
        { 
          reply_markup: keyboard,
          parse_mode: "Markdown"
        }
      );
    } catch (editError: any) {
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—à–∏–±–∫—É –æ –Ω–µ–∏–∑–º–µ–Ω–µ–Ω–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
      if (editError.description && editError.description.includes('message is not modified')) {
        logger.debug('–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ');
      } else {
        throw editError;
      }
    }
  } catch (error) {
    logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≥–æ–ª–æ—Å–æ–≤:", error);
  }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ—Ä–æ–≥–∞ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –æ—Ü–µ–Ω–æ–∫
async function updateNegThresholdMessage(ctx: MyContext) {
  try {
    if (!ctx.session?.negativeThreshold) return;
    
    const threshold = ctx.session.negativeThreshold;
    
    const keyboard = keyboardService.getNegativeThresholdSettingsKeyboard(threshold);
    
    try {
      await ctx.editMessageText(
        "üëé *–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ—Ä–æ–≥–∞ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –æ—Ü–µ–Ω–æ–∫*\n\n" +
        "–≠—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –æ—Ü–µ–Ω–æ–∫, –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –∫–æ—Ç–æ—Ä–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫ –±—É–¥–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω –∏–∑ —Å–µ—Ä–≤–µ—Ä–∞.\n\n" +
        `–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: ${threshold}`,
        { 
          reply_markup: keyboard,
          parse_mode: "Markdown"
        }
      );
    } catch (editError: any) {
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—à–∏–±–∫—É –æ –Ω–µ–∏–∑–º–µ–Ω–µ–Ω–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
      if (editError.description && editError.description.includes('message is not modified')) {
        logger.debug('–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ');
      } else {
        throw editError;
      }
    }
  } catch (error) {
    logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ—Ä–æ–≥–∞ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –æ—Ü–µ–Ω–æ–∫:", error);
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π –∑–∞—è–≤–∫–∏
adminController.callbackQuery(/^app_view_(\d+)$/, async (ctx) => {
  try {
    await ctx.answerCallbackQuery();
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∑–∞—è–≤–∫–∏ –∏–∑ callback –¥–∞–Ω–Ω—ã—Ö
    const applicationId = parseInt(ctx.match?.[1] || '0');
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏
    const application = await applicationRepository.findById(applicationId);
    const user = await userRepository.findById(application.userId);
    
    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –∫ –∑–∞—è–≤–∫–µ
    const questionRepository = new QuestionRepository();
    const questions = await questionRepository.findByApplicationId(applicationId);
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞—è–≤–∫–µ
    let message = `üìã *–ó–∞—è–≤–∫–∞ #${application.id}*\n\n` +
                  `üë§ *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:* ${user.username ? `@${escapeMarkdown(user.username)}` : '–ù–µ —É–∫–∞–∑–∞–Ω'}\n` +
                  `üéÆ *–ù–∏–∫–Ω–µ–π–º:* ${escapeMarkdown(application.minecraftNickname)}\n` +
                  `üìÖ *–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:* ${application.createdAt.toLocaleString('ru-RU')}\n` +
                  `üìù *–ü—Ä–∏—á–∏–Ω–∞:* ${escapeMarkdown(application.reason)}\n` +
                  `üîÑ *–°—Ç–∞—Ç—É—Å:* ${application.status === ApplicationStatus.PENDING ? '‚è≥ –û–∂–∏–¥–∞–µ—Ç' : 
                                application.status === ApplicationStatus.VOTING ? 'üó≥Ô∏è –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ' : 
                                application.status === ApplicationStatus.APPROVED ? '‚úÖ –û–¥–æ–±—Ä–µ–Ω–∞' : 
                                application.status === ApplicationStatus.REJECTED ? '‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–∞' : 
                                application.status === ApplicationStatus.EXPIRED ? '‚è∞ –ò—Å—Ç–µ–∫–ª–∞' : 
                                '‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}`;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–∏, –µ—Å–ª–∏ –∑–∞—è–≤–∫–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–∏
    if (application.status === ApplicationStatus.VOTING) {
      const votesInfo = `\n\nüó≥Ô∏è *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–∏:*\n` +
                       `üëç –ó–∞: ${application.positiveVotes}\n` +
                       `üëé –ü—Ä–æ—Ç–∏–≤: ${application.negativeVotes}\n`;
      
      message += votesInfo;
      
      if (application.votingEndsAt) {
        const endsDate = new Date(application.votingEndsAt).toLocaleString('ru-RU');
        message += `‚è±Ô∏è *–û–∫–æ–Ω—á–∞–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è:* ${endsDate}`;
      }
    }
    
    // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–æ–ø—Ä–æ—Å–∞—Ö
    if (questions.length > 0) {
      message += `\n\n‚ùì *–í–æ–ø—Ä–æ—Å–æ–≤:* ${questions.length}`;
    }
    
    // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π —Å –∑–∞—è–≤–∫–æ–π
    let keyboard = ButtonComponents.adminApplicationActions(application.id, application.status);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏
    keyboard.text("‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", `ask_question_${application.id}`).row();
    
    if (questions.length > 0) {
      keyboard.text(`üìù –í–æ–ø—Ä–æ—Å—ã (${questions.length})`, `view_questions_${application.id}`).row();
    }
    
    keyboard.text("üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", "admin_applications").row();
    
    await ctx.reply(message, { 
      reply_markup: keyboard,
      parse_mode: "Markdown"
    });
  } catch (error) {
    await handleErrorWithContext(ctx, error, "viewApplicationDetails");
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∏—è –∑–∞—è–≤–∫–∏
adminController.callbackQuery(/^app_approve_(\d+)$/, async (ctx) => {
  try {
    await ctx.answerCallbackQuery();
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∑–∞—è–≤–∫–∏ –∏–∑ callback –¥–∞–Ω–Ω—ã—Ö
    const applicationId = parseInt(ctx.match?.[1] || '0');
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏
    const application = await applicationRepository.findById(applicationId);
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await userRepository.findById(application.userId);
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ñ—Ñ–ª–∞–π–Ω-UUID –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const minecraftService = new MinecraftService();
    const offlineUUID = minecraftService.generateOfflineUUID(application.minecraftNickname);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ –Ω–∞ "–û–¥–æ–±—Ä–µ–Ω–∞"
    await applicationRepository.updateStatus(applicationId, ApplicationStatus.APPROVED);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ MEMBER, –¥–∞–µ–º –ø—Ä–∞–≤–æ –≥–æ–ª–æ—Å–∞ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º UUID
    await userRepository.update(user.id, {
      role: RoleManager.ROLES.MEMBER,
      canVote: true,
      minecraftUUID: offlineUUID
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∏–≥—Ä–æ–∫–∞ –≤ –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–µ—Ä–∞
    const addedToWhitelist = await minecraftService.addToWhitelist(
      application.minecraftNickname, 
      offlineUUID
    );
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –æ–¥–æ–±—Ä–µ–Ω–∏–∏
    let responseMessage = `‚úÖ –ó–∞—è–≤–∫–∞ #${applicationId} –æ—Ç ${escapeMarkdown(application.minecraftNickname)} —É—Å–ø–µ—à–Ω–æ –æ–¥–æ–±—Ä–µ–Ω–∞.`;
    responseMessage += `\n\nUUID –∏–≥—Ä–æ–∫–∞: \`${offlineUUID}\``;
    
    if (addedToWhitelist) {
      responseMessage += "\n\n‚úÖ –ò–≥—Ä–æ–∫ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–µ—Ä–∞.";
    } else {
      responseMessage += "\n\n‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∏–≥—Ä–æ–∫–∞ –≤ –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫. –í–æ–∑–º–æ–∂–Ω–æ, —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.";
    }
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    await ctx.reply(responseMessage, { parse_mode: "Markdown" });
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    if (getBotInstance()) {
      try {
        const bot = getBotInstance();
        if (bot) {
          await bot.api.sendMessage(
            Number(user.telegramId),
            `‚úÖ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ Minecraft-—Å–µ—Ä–≤–µ—Ä –æ–¥–æ–±—Ä–µ–Ω–∞.\n\n` +
            `–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É, –∏—Å–ø–æ–ª—å–∑—É—è —Å–≤–æ–π –Ω–∏–∫–Ω–µ–π–º: ${escapeMarkdown(application.minecraftNickname)}\n\n` +
            `–ü—Ä–∏—è—Ç–Ω–æ–π –∏–≥—Ä—ã!`
          );
        }
      } catch (error) {
        logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.id}:`, error);
      }
    }
  } catch (error) {
    logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏:', error);
    await ctx.reply('üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏
adminController.callbackQuery(/^app_reject_(\d+)$/, async (ctx) => {
  try {
    await ctx.answerCallbackQuery();
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∑–∞—è–≤–∫–∏ –∏–∑ callback –¥–∞–Ω–Ω—ã—Ö
    const applicationId = parseInt(ctx.match?.[1] || '0');
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏
    const application = await applicationRepository.findById(applicationId);
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await userRepository.findById(application.userId);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ –Ω–∞ "–û—Ç–∫–ª–æ–Ω–µ–Ω–∞"
    await applicationRepository.updateStatus(applicationId, ApplicationStatus.REJECTED);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    await ctx.reply(
      `‚ùå –ó–∞—è–≤–∫–∞ #${applicationId} –æ—Ç ${escapeMarkdown(application.minecraftNickname)} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.`
    );
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    if (getBotInstance()) {
      try {
        const bot = getBotInstance();
        if (bot) {
          await bot.api.sendMessage(
            Number(user.telegramId),
            `‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ Minecraft-—Å–µ—Ä–≤–µ—Ä –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.\n\n` +
            `–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É –ø–æ–∑–∂–µ.`
          );
        }
      } catch (error) {
        logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.id}:`, error);
      }
    }
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –∑–∞—è–≤–æ–∫
    const keyboard = new InlineKeyboard()
      .text("üîô –ö —Å–ø–∏—Å–∫—É –∑–∞—è–≤–æ–∫", "admin_applications");
    
    await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", { reply_markup: keyboard });
  } catch (error) {
    await handleErrorWithContext(ctx, error, "rejectApplication");
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
adminController.callbackQuery(/^app_start_voting_(\d+)$/, async (ctx) => {
  try {
    await ctx.answerCallbackQuery();
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∑–∞—è–≤–∫–∏ –∏–∑ callback –¥–∞–Ω–Ω—ã—Ö
    const applicationId = parseInt(ctx.match?.[1] || '0');
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏
    const application = await applicationRepository.findById(applicationId);
    
    // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
    const settings = await systemSettingsRepository.getSettings();
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
    const votingEndsAt = new Date();
    votingEndsAt.setDate(votingEndsAt.getDate() + settings.votingDurationDays);
    votingEndsAt.setHours(votingEndsAt.getHours() + settings.votingDurationHours);
    votingEndsAt.setMinutes(votingEndsAt.getMinutes() + settings.votingDurationMinutes);
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ
    await applicationRepository.startVoting(applicationId, votingEndsAt);
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await userRepository.findById(application.userId);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    await ctx.reply(
      `üó≥Ô∏è –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –ø–æ –∑–∞—è–≤–∫–µ #${applicationId} –æ—Ç ${application.minecraftNickname} –∑–∞–ø—É—â–µ–Ω–æ.\n\n` +
      `–û–∫–æ–Ω—á–∞–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è: ${votingEndsAt.toLocaleString('ru-RU')}`
    );
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    if (getBotInstance()) {
      try {
        const bot = getBotInstance();
        if (bot) {
          await bot.api.sendMessage(
            Number(user.telegramId),
            `üó≥Ô∏è –ü–æ –≤–∞—à–µ–π –∑–∞—è–≤–∫–µ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ Minecraft-—Å–µ—Ä–≤–µ—Ä –Ω–∞—á–∞—Ç–æ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ.\n\n` +
            `–û–∫–æ–Ω—á–∞–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è: ${votingEndsAt.toLocaleString('ru-RU')}\n\n` +
            `–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤–∞–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.`
          );
        }
      } catch (error) {
        logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.id}:`, error);
      }
    }
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å –ø—Ä–∞–≤–æ–º –≥–æ–ª–æ—Å–∞
    const voters = await userRepository.findVoters();
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞–º —Å –ø—Ä–∞–≤–æ–º –≥–æ–ª–æ—Å–∞
    const bot = getBotInstance();
    if (bot && voters.length > 0) {
      const voteKeyboard = new InlineKeyboard()
        .text("üëç –ó–∞", `vote_positive_${applicationId}`)
        .text("üëé –ü—Ä–æ—Ç–∏–≤", `vote_negative_${applicationId}`).row()
        .text("‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", `ask_question_${applicationId}`).row();
      
      for (const voter of voters) {
        // –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–∞–º–æ–º—É –∑–∞—è–≤–∏—Ç–µ–ª—é
        if (voter.id === user.id) continue;
        
        try {
          await bot.api.sendMessage(
            Number(voter.telegramId),
            `üó≥Ô∏è *–ù–æ–≤–æ–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –ø–æ –∑–∞—è–≤–∫–µ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ*\n\n` +
            `üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${user.username ? `@${escapeMarkdown(user.username)}` : '–ù–µ —É–∫–∞–∑–∞–Ω'}\n` +
            `üéÆ –ù–∏–∫–Ω–µ–π–º: ${escapeMarkdown(application.minecraftNickname)}\n` +
            `üìù –ü—Ä–∏—á–∏–Ω–∞: ${escapeMarkdown(application.reason.substring(0, 100))}${application.reason.length > 100 ? '...' : ''}\n\n` +
            `‚è±Ô∏è –û–∫–æ–Ω—á–∞–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è: ${votingEndsAt.toLocaleString('ru-RU')}`,
            { 
              reply_markup: voteKeyboard,
              parse_mode: "Markdown"
            }
          );
        } catch (error) {
          logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫—É ${voter.id}:`, error);
        }
      }
    }
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –∑–∞—è–≤–æ–∫
    const keyboard = new InlineKeyboard()
      .text("üîô –ö —Å–ø–∏—Å–∫—É –∑–∞—è–≤–æ–∫", "admin_applications");
    
    await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", { reply_markup: keyboard });
  } catch (error) {
    await handleErrorWithContext(ctx, error, "startVoting");
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å"
adminController.callbackQuery(/^ask_question_(\d+)$/, async (ctx) => {
  try {
    await ctx.answerCallbackQuery();
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∑–∞—è–≤–∫–∏ –∏–∑ callback –¥–∞–Ω–Ω—ã—Ö
    const applicationId = parseInt(ctx.match?.[1] || '0');
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏
    const application = await applicationRepository.findById(applicationId);
    
    // –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –¥–ª—è –¥–∏–∞–ª–æ–≥–∞ —Å –≤–æ–ø—Ä–æ—Å–æ–º
    await ctx.reply(
      "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –∫ –∑–∞—è–≤–∏—Ç–µ–ª—é:",
      { parse_mode: "Markdown" }
    );
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–±–∏—Ä–∞–µ—Ç—Å—è –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å
    if (ctx.session) {
      ctx.session.askQuestionAppId = applicationId;
      ctx.session.step = 'waiting_question';
    }
  } catch (error) {
    await handleErrorWithContext(ctx, error, "askQuestionCallback");
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø—Ä–∏ –æ–∂–∏–¥–∞–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞
adminController.on('message:text', async (ctx, next) => {
  if (!ctx.session || ctx.session.step !== 'waiting_question' || !ctx.session.askQuestionAppId) {
    await next();
    return;
  }
  
  try {
    const userId = ctx.from?.id;
    if (!userId) {
      await ctx.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
      return;
    }
    
    const applicationId = ctx.session.askQuestionAppId;
    const questionText = ctx.message.text;
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏
    const application = await applicationRepository.findById(applicationId);
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const questionRepository = new QuestionRepository();
    const questionData = {
      applicationId,
      askerId: userId,
      text: questionText,
      createdAt: new Date(),
      updatedAt: new Date()
    };
    
    const questionId = await questionRepository.addQuestion(questionData);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –Ω–æ–≤–æ–º –≤–æ–ø—Ä–æ—Å–µ
    const bot = getBotInstance();
    if (bot) {
      try {
        const applicantMessage = `‚ùì *–£ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–æ—è–≤–∏–ª—Å—è –≤–æ–ø—Ä–æ—Å –ø–æ –≤–∞—à–µ–π –∑–∞—è–≤–∫–µ #${applicationId}*\n\n` +
                               `*–í–æ–ø—Ä–æ—Å:* ${escapeMarkdown(questionText)}\n\n` +
                               `–ß—Ç–æ–±—ã –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /applications –∏ –Ω–∞–π–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –≤ –¥–µ—Ç–∞–ª—è—Ö –∑–∞—è–≤–∫–∏.`;
                              
        await bot.api.sendMessage(application.userId, applicantMessage, {
          parse_mode: "Markdown"
        });
      } catch (e) {
        logger.error(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤–æ–ø—Ä–æ—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: ${e}`);
      }
    }
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É –∑–∞—è–≤–∫–∏ —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ–± —É—Å–ø–µ—Ö–µ
    const keyboard = new InlineKeyboard()
      .text("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∑–∞—è–≤–∫–µ", `app_view_${applicationId}`);
    
    await ctx.reply(
      `‚úÖ –í–æ–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∑–∞—è–≤–∏—Ç–µ–ª—é!`,
      { reply_markup: keyboard, parse_mode: "Markdown" }
    );
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    ctx.session.step = undefined;
    ctx.session.askQuestionAppId = undefined;
    
  } catch (error) {
    logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –≤–æ–ø—Ä–æ—Å–æ–º: ${error}`);
    await ctx.reply(
      "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
      { parse_mode: "Markdown" }
    );
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    if (ctx.session) {
      ctx.session.step = undefined;
      ctx.session.askQuestionAppId = undefined;
    }
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –∫ –∑–∞—è–≤–∫–µ
adminController.callbackQuery(/^view_questions_(\d+)$/, async (ctx) => {
  try {
    await ctx.answerCallbackQuery();
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∑–∞—è–≤–∫–∏ –∏–∑ callback –¥–∞–Ω–Ω—ã—Ö
    const applicationId = parseInt(ctx.match?.[1] || '0');
    
    // –ü–æ–ª—É—á–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã –∫ –∑–∞—è–≤–∫–µ
    const questionRepository = new QuestionRepository();
    const questions = await questionRepository.findByApplicationId(applicationId);
    
    if (questions.length === 0) {
      return await ctx.reply(
        "‚ö†Ô∏è –ö —ç—Ç–æ–π –∑–∞—è–≤–∫–µ –ø–æ–∫–∞ –Ω–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤.",
        { 
          reply_markup: new InlineKeyboard()
            .text("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∑–∞—è–≤–∫–µ", `app_view_${applicationId}`)
        }
      );
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
    const userIds = [...new Set(questions.map(q => q.askerId))];
    const users = await Promise.all(userIds.map(id => userRepository.findById(id)));
    
    // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ç–∏–ø–∏–∑–∞—Ü–∏–µ–π
    const userMap: Record<number, User> = {};
    users.forEach(user => {
      if (user) {
        userMap[user.id] = user;
      }
    });
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏
    let message = `üìù *–í–æ–ø—Ä–æ—Å—ã –ø–æ –∑–∞—è–≤–∫–µ #${applicationId}*\n\n`;
    
    questions.forEach((question, index) => {
      const user = userMap[question.askerId];
      const userName = user ? (user.username ? `@${escapeMarkdown(user.username)}` : `ID: ${user.telegramId}`) : '–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω';
      
      message += `*–í–æ–ø—Ä–æ—Å #${index + 1}* (–æ—Ç ${userName}):\n${escapeMarkdown(question.text)}\n`;
      
      if (question.answer) {
        message += `\n*–û—Ç–≤–µ—Ç:*\n${escapeMarkdown(question.answer)}\n`;
      } else {
        message += "\n*–û—Ç–≤–µ—Ç:* –û–∂–∏–¥–∞–µ—Ç—Å—è\n";
      }
      
      if (index < questions.length - 1) {
        message += "\n---------------------\n\n";
      }
    });
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏
    await ctx.reply(message, {
      reply_markup: new InlineKeyboard()
        .text("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∑–∞—è–≤–∫–µ", `app_view_${applicationId}`),
      parse_mode: "Markdown"
    });
  } catch (error) {
    await handleErrorWithContext(ctx, error, "viewQuestionsCallback");
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∞–≤ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
adminController.command("update_all_voting_rights", adminMiddleware, async (ctx) => {
  try {
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∞–≤–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    const updatedCount = await userRepository.updateAllMembersVotingRights();
    
    if (updatedCount > 0) {
      await ctx.reply(`‚úÖ –ü—Ä–∞–≤–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã –¥–ª—è ${updatedCount} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.`);
    } else {
      await ctx.reply("‚ÑπÔ∏è –ù–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∞–≤ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è.");
    }
  } catch (error) {
    await handleErrorWithContext(ctx, error, "updateAllVotingRights");
  }
});

export { adminController };