import { Bot, Composer, InlineKeyboard } from "grammy";
import type { MyContext } from "../index";
import { handleError } from "../utils/errorHandler";
import { logger } from "../utils/logger";
import { UserRepository } from "../db/repositories/userRepository";
import { ApplicationStatus, VoteType, UserRole, type Application, type CreateVoteRequest } from "../models/types";
import type { User } from "../models/types";
import { ApplicationRepository } from "../db/repositories/applicationRepository";
import { keyboardService } from "../services/keyboardService";
import { messageService } from "../services/messageService";
import { botController } from './botController';
import { QuestionRepository } from "../db/repositories/questionRepository";
import { VoteRepository } from "../db/repositories/voteRepository";
import { ButtonComponents } from "../components/buttons";
import { RoleManager } from "../components/roles";

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–æ–º–ø–æ–∑–µ—Ä–∞ –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞ –∑–∞—è–≤–æ–∫
const applicationController = new Composer<MyContext>();

// –û–±—ä—è–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞
let botInstance: Bot<MyContext> | null = null;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞
export function setBotInstance(bot: Bot<MyContext>): void {
  botInstance = bot;
  logger.info("‚úÖ –ë–æ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–µ –∑–∞—è–≤–æ–∫");
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞
export function getBotInstance(): Bot<MyContext> | null {
  return botInstance;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ Markdown
function escapeMarkdown(text: string): string {
  if (!text) return '';
  // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã Markdown: * _ ` [ ]
  return text.replace(/([*_`\[\]])/g, '\\$1');
}

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏
applicationController.command("apply", handleError(async (ctx: MyContext) => {
  if (!ctx.from) return;
  
  const telegramId = ctx.from.id;
  const userRepository = new UserRepository();
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏ –µ–≥–æ —Å—Ç–∞—Ç—É—Å
  const user = await userRepository.findByTelegramId(telegramId);
  
  if (user) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–º
    if (RoleManager.isMemberOrAdmin(user)) {
      await ctx.reply(
        '‚ö†Ô∏è –í—ã —É–∂–µ —è–≤–ª—è–µ—Ç–µ—Å—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —Å–µ—Ä–≤–µ—Ä–∞.\n\n' +
        '–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –¥–æ—Å—Ç—É–ø–æ–º, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.'
      );
      return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –æ–¥–æ–±—Ä–µ–Ω–Ω–∞—è –∑–∞—è–≤–∫–∞
    const applicationRepository = new ApplicationRepository();
    const applications = await applicationRepository.findAllApplicationsByUserId(user.id);
    
    const hasApprovedApplication = applications.some((app: Application) => app.status === ApplicationStatus.APPROVED);
    if (hasApprovedApplication) {
      await ctx.reply(
        '‚ö†Ô∏è –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –æ–¥–æ–±—Ä–µ–Ω–Ω–∞—è –∑–∞—è–≤–∫–∞.\n\n' +
        '–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –¥–æ—Å—Ç—É–ø–æ–º, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.'
      );
      return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏
    const activeApplications = await applicationRepository.findActiveApplicationsByUserId(user.id);
    if (activeApplications.length > 0) {
      await ctx.reply(
        '‚ö†Ô∏è –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞—è–≤–∫–∞.\n\n' +
        '–î–æ–∂–¥–∏—Ç–µ—Å—å —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π –∑–∞—è–≤–∫–∏ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º —Å–µ—Ä–≤–µ—Ä–∞.'
      );
      return;
    }
  }
  
  // –ï—Å–ª–∏ –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã, –Ω–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏
  await ctx.reply(
    'üìù –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ.\n\n' +
    '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –Ω–∏–∫–Ω–µ–π–º –≤ Minecraft:'
  );
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —à–∞–≥ –≤ —Å–µ—Å—Å–∏–∏
  if (ctx.session) {
    ctx.session.step = 'waiting_nickname';
    ctx.session.form = {};
  }
}));

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏ —á–µ—Ä–µ–∑ inline keyboard
applicationController.callbackQuery('start_application', handleError(async (ctx) => {
  if (!ctx.from) {
    await ctx.answerCallbackQuery('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    return;
  }
  
  await ctx.answerCallbackQuery();
  
  const telegramId = ctx.from.id;
  const userRepository = new UserRepository();
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏ –µ–≥–æ —Å—Ç–∞—Ç—É—Å
  const user = await userRepository.findByTelegramId(telegramId);
  
  if (user) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–º
    if (RoleManager.isMemberOrAdmin(user)) {
      await ctx.reply(
        '‚ö†Ô∏è –í—ã —É–∂–µ —è–≤–ª—è–µ—Ç–µ—Å—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —Å–µ—Ä–≤–µ—Ä–∞.\n\n' +
        '–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –¥–æ—Å—Ç—É–ø–æ–º, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.'
      );
      return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –æ–¥–æ–±—Ä–µ–Ω–Ω–∞—è –∑–∞—è–≤–∫–∞
    const applicationRepository = new ApplicationRepository();
    const applications = await applicationRepository.findAllApplicationsByUserId(user.id);
    
    const hasApprovedApplication = applications.some((app: Application) => app.status === ApplicationStatus.APPROVED);
    if (hasApprovedApplication) {
      await ctx.reply(
        '‚ö†Ô∏è –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –æ–¥–æ–±—Ä–µ–Ω–Ω–∞—è –∑–∞—è–≤–∫–∞.\n\n' +
        '–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –¥–æ—Å—Ç—É–ø–æ–º, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.'
      );
      return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏
    const activeApplications = await applicationRepository.findActiveApplicationsByUserId(user.id);
    if (activeApplications.length > 0) {
      await ctx.reply(
        '‚ö†Ô∏è –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞—è–≤–∫–∞.\n\n' +
        '–î–æ–∂–¥–∏—Ç–µ—Å—å —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π –∑–∞—è–≤–∫–∏ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º —Å–µ—Ä–≤–µ—Ä–∞.'
      );
      return;
    }
  }
  
  // –ï—Å–ª–∏ –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã, –Ω–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏
  await ctx.reply(
    'üìù –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ.\n\n' +
    '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –Ω–∏–∫–Ω–µ–π–º –≤ Minecraft:'
  );
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —à–∞–≥ –≤ —Å–µ—Å—Å–∏–∏
  if (ctx.session) {
    ctx.session.step = 'waiting_nickname';
    ctx.session.form = {};
  }
}));

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é
botController.hears("üìù –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É", async (ctx: MyContext) => {
  if (!ctx.from) return;
  
  const telegramId = ctx.from.id;
  const userRepository = new UserRepository();
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏ –µ–≥–æ —Å—Ç–∞—Ç—É—Å
    const user = await userRepository.findByTelegramId(telegramId);
    
    if (user) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–º
      if (RoleManager.isMemberOrAdmin(user)) {
        await ctx.reply(
          '‚ö†Ô∏è –í—ã —É–∂–µ —è–≤–ª—è–µ—Ç–µ—Å—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —Å–µ—Ä–≤–µ—Ä–∞.\n\n' +
          '–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –¥–æ—Å—Ç—É–ø–æ–º, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.'
        );
        return;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –æ–¥–æ–±—Ä–µ–Ω–Ω–∞—è –∑–∞—è–≤–∫–∞
      const applicationRepository = new ApplicationRepository();
      const applications = await applicationRepository.findAllApplicationsByUserId(user.id);
      
      const hasApprovedApplication = applications.some((app: Application) => app.status === ApplicationStatus.APPROVED);
      if (hasApprovedApplication) {
        await ctx.reply(
          '‚ö†Ô∏è –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –æ–¥–æ–±—Ä–µ–Ω–Ω–∞—è –∑–∞—è–≤–∫–∞.\n\n' +
          '–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –¥–æ—Å—Ç—É–ø–æ–º, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.'
        );
        return;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏
      const activeApplications = await applicationRepository.findActiveApplicationsByUserId(user.id);
      if (activeApplications.length > 0) {
        await ctx.reply(
          '‚ö†Ô∏è –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞—è–≤–∫–∞.\n\n' +
          '–î–æ–∂–¥–∏—Ç–µ—Å—å —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π –∑–∞—è–≤–∫–∏ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º —Å–µ—Ä–≤–µ—Ä–∞.'
        );
        return;
      }
    }
    
    // –ï—Å–ª–∏ –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã, –Ω–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏
    await ctx.reply(
      'üìù –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ.\n\n' +
      '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –Ω–∏–∫–Ω–µ–π–º –≤ Minecraft:'
    );
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —à–∞–≥ –≤ —Å–µ—Å—Å–∏–∏
    if (ctx.session) {
      ctx.session.step = 'waiting_nickname';
      ctx.session.form = {};
    }
  } catch (error) {
    logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏:", error);
    await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
  }
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏
applicationController.command("status", handleError(async (ctx: MyContext) => {
  if (!ctx.from) return;
  
  const telegramId = ctx.from.id;
  const userRepository = new UserRepository();
  const applicationRepository = new ApplicationRepository();
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    const user = await userRepository.findByTelegramId(telegramId);
    
    if (!user) {
      await ctx.reply(
        '‚ö†Ô∏è –í—ã –µ—â–µ –Ω–µ –ø–æ–¥–∞–ª–∏ –∑–∞—è–≤–∫—É.\n\n' +
        '–ß—Ç–æ–±—ã –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /apply'
      );
      return;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const activeApplications = await applicationRepository.findActiveApplicationsByUserId(user.id);
    
    if (activeApplications.length === 0) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —á–ª–µ–Ω–æ–º —Å–æ–æ–±—â–µ—Å—Ç–≤–∞
      if (RoleManager.isMemberOrAdmin(user)) {
        await ctx.reply(
          '‚úÖ –í—ã —è–≤–ª—è–µ—Ç–µ—Å—å —á–ª–µ–Ω–æ–º —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ –∏ –∏–º–µ–µ—Ç–µ –¥–æ—Å—Ç—É–ø –∫ —Å–µ—Ä–≤–µ—Ä—É!\n\n' +
          '–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –¥–æ—Å—Ç—É–ø–æ–º, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.'
        );
        return;
      }
      
      await ctx.reply(
        '‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫.\n\n' +
        '–í–æ–∑–º–æ–∂–Ω–æ, –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ —É–∂–µ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∞ –∏–ª–∏ –≤—ã –µ—â–µ –Ω–µ –ø–æ–¥–∞–≤–∞–ª–∏ –∑–∞—è–≤–∫—É.\n' +
        '–ß—Ç–æ–±—ã –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /apply'
      );
      return;
    }
    
    // –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞—è–≤–∫–µ
    const application = activeApplications[0];
    if (application) {
      await messageService.sendApplicationStatus(ctx, application);
    } else {
      await ctx.reply('‚ö†Ô∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞—è–≤–∫–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.');
    }
    
  } catch (error) {
    logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /status:', error);
    await ctx.reply('üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.');
  }
}));

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∏–∫–Ω–µ–π–º–∞ –≤ Minecraft
applicationController.on('message', async (ctx, next) => {
  if (!ctx.message || !ctx.from || !ctx.message.text) return next();
  
  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —à–∞–≥ –≤–≤–æ–¥–∞ –Ω–∏–∫–Ω–µ–π–º–∞ Minecraft
  if (ctx.session?.step === 'waiting_nickname') {
    const minecraftNickname = ctx.message.text.trim();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –Ω–∏–∫–Ω–µ–π–º–∞
    if (minecraftNickname.length < 3 || minecraftNickname.length > 16 || !/^[a-zA-Z0-9_]+$/.test(minecraftNickname)) {
      await ctx.reply(
        '‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–∏–∫–Ω–µ–π–º.\n\n' +
        '–ù–∏–∫–Ω–µ–π–º –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 3 –¥–æ 16 —Å–∏–º–≤–æ–ª–æ–≤ –∏ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è.\n' +
        '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–∏–∫–Ω–µ–π–º:'
      );
      return;
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∏–∫–Ω–µ–π–º –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
    if (!ctx.session.form) ctx.session.form = {};
    ctx.session.form.minecraftNickname = minecraftNickname;
    ctx.session.step = 'waiting_reason';
    
    await ctx.reply(
      `‚úÖ –ù–∏–∫–Ω–µ–π–º –ø—Ä–∏–Ω—è—Ç: ${minecraftNickname}\n\n` +
      '–¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É, –ø–æ –∫–æ—Ç–æ—Ä–æ–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –Ω–∞—à–µ–º—É —Å–µ—Ä–≤–µ—Ä—É.\n' +
      '–ù–∞–ø–∏—à–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ, —Å–≤–æ–µ–º –∏–≥—Ä–æ–≤–æ–º –æ–ø—ã—Ç–µ –∏ –æ —Ç–æ–º, —á—Ç–æ –≤–∞—Å –ø—Ä–∏–≤–ª–µ–∫–∞–µ—Ç –≤ –Ω–∞—à–µ–º —Å–µ—Ä–≤–µ—Ä–µ:'
    );
    
    return;
  }
  
  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —à–∞–≥ –≤–≤–æ–¥–∞ –ø—Ä–∏—á–∏–Ω—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
  if (ctx.session?.step === 'waiting_reason' && ctx.session.form?.minecraftNickname) {
    const reason = ctx.message.text.trim();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –ø—Ä–∏—á–∏–Ω—ã
    if (reason.length < 10) {
      await ctx.reply(
        '‚ùå –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∞—è –ø—Ä–∏—á–∏–Ω–∞.\n\n' +
        '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ —Å–µ–±–µ –∏ –æ —Ç–æ–º, –ø–æ—á–µ–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –Ω–∞—à–µ–º—É —Å–µ—Ä–≤–µ—Ä—É:'
      );
      return;
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∏—á–∏–Ω—É
    ctx.session.form.reason = reason;
    ctx.session.step = 'confirmation';
    
    // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    const keyboard = ButtonComponents.confirmCancel('confirm_application', 'cancel_application');
    
    await ctx.reply(
      'üìã –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤–∞—à–µ–π –∑–∞—è–≤–∫–∏:\n\n' +
      `üéÆ –ù–∏–∫–Ω–µ–π–º: ${ctx.session.form.minecraftNickname}\n` +
      `üìù –ü—Ä–∏—á–∏–Ω–∞: ${reason}\n\n` +
      '–í—Å—ë –≤–µ—Ä–Ω–æ? –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É –∑–∞—è–≤–∫–∏ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ:',
      { reply_markup: keyboard }
    );
    
    return;
  }
  
  return next();
});

// –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏
applicationController.callbackQuery('confirm_application', handleError(async (ctx) => {
  if (!ctx.from || !ctx.session?.form?.minecraftNickname || !ctx.session.form.reason) {
    await ctx.answerCallbackQuery('‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏');
    return;
  }
  
  await ctx.answerCallbackQuery();
  
  const telegramId = ctx.from.id;
  const minecraftNickname = ctx.session.form.minecraftNickname;
  const reason = ctx.session.form.reason;
  
  // –ü–æ–ª—É—á–∞–µ–º username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
  const username = ctx.from.username || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
  
  const userRepository = new UserRepository();
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    let user = await userRepository.findByTelegramId(telegramId);
    
    if (!user) {
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      user = await userRepository.create({
        telegramId,
        username: ctx.from.username || undefined, // –ò—Å–ø–æ–ª—å–∑—É–µ–º undefined, –µ—Å–ª–∏ username –Ω–µ —É–∫–∞–∑–∞–Ω
        minecraftNickname,
        role: RoleManager.ROLES.APPLICANT,
        canVote: false
      });
    } else {
      // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      user = await userRepository.update(user.id, {
        username: ctx.from.username || undefined, // –û–±–Ω–æ–≤–ª—è–µ–º username, –µ—Å–ª–∏ –æ–Ω –∏–∑–º–µ–Ω–∏–ª—Å—è
        minecraftNickname
      });
    }
    
    const applicationRepository = new ApplicationRepository();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏
    const activeApplications = await applicationRepository.findActiveApplicationsByUserId(user.id);
    
    if (activeApplications.length > 0) {
      await ctx.reply(
        '‚ö†Ô∏è –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞—è–≤–∫–∞.\n\n' +
        '–î–æ–∂–¥–∏—Ç–µ—Å—å —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π –∑–∞—è–≤–∫–∏ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º —Å–µ—Ä–≤–µ—Ä–∞.'
      );
      return;
    }
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É
    const applicationForm = {
      userId: user.id,
      minecraftNickname,
      reason,
      status: ApplicationStatus.PENDING
    };
    
    const application = await applicationRepository.create(applicationForm);
    
    // –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏
    ctx.session.form = {};
    ctx.session.step = undefined;
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    const mainKeyboard = await keyboardService.getMainKeyboard(ctx.from.id);
    await ctx.reply(
      '‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!\n\n' +
      '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã —Ä–∞—Å—Å–º–æ—Ç—Ä—è—Ç –µ—ë –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è. –í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ —Å—Ç–∞—Ç—É—Å –≤–∞—à–µ–π –∑–∞—è–≤–∫–∏ –∏–∑–º–µ–Ω–∏—Ç—Å—è.\n\n' +
      '–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–≤–æ–µ–π –∑–∞—è–≤–∫–∏ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /status',
      { reply_markup: mainKeyboard }
    );
    
    // –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ
    if (botInstance) {
      // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
      const admins = await userRepository.findAdmins();
      
      if (admins.length > 0) {
        // –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞—è–≤–∫–∏
        const adminKeyboard = ButtonComponents.singleButton('üîç –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞—è–≤–∫—É', `app_view_${application.id}`);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∂–¥–æ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        for (const admin of admins) {
          try {
            await botInstance.api.sendMessage(
              Number(admin.telegramId),
              `üÜï –ü–æ—Å—Ç—É–ø–∏–ª–∞ –Ω–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ!\n\n` +
              `üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${username}\n` +
              `üéÆ –ù–∏–∫–Ω–µ–π–º: ${minecraftNickname}\n` +
              `üìù –ü—Ä–∏—á–∏–Ω–∞: ${reason.substring(0, 100)}${reason.length > 100 ? '...' : ''}`,
              { reply_markup: adminKeyboard }
            );
          } catch (error) {
            logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É ${admin.telegramId}:`, error);
          }
        }
      }
      
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å –ø—Ä–∞–≤–æ–º –≥–æ–ª–æ—Å–∞, —á—Ç–æ–±—ã —É–≤–µ–¥–æ–º–∏—Ç—å –∏—Ö –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ
      const voters = await userRepository.findVoters();
      
      if (voters.length > 0) {
        // –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞—è–≤–∫–∏
        const voterKeyboard = ButtonComponents.singleButton('üîç –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞—è–≤–∫—É', `app_view_${application.id}`);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∂–¥–æ–º—É —É—á–∞—Å—Ç–Ω–∏–∫—É —Å –ø—Ä–∞–≤–æ–º –≥–æ–ª–æ—Å–∞
        for (const voter of voters) {
          // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤, –æ–Ω–∏ —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
          const isAdmin = admins.some(admin => admin.id === voter.id);
          if (isAdmin) continue;
          
          try {
            await botInstance.api.sendMessage(
              Number(voter.telegramId),
              `üÜï –ü–æ—Å—Ç—É–ø–∏–ª–∞ –Ω–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ!\n\n` +
              `üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${username}\n` +
              `üéÆ –ù–∏–∫–Ω–µ–π–º: ${minecraftNickname}\n` +
              `üìù –ü—Ä–∏—á–∏–Ω–∞: ${reason.substring(0, 100)}${reason.length > 100 ? '...' : ''}\n\n` +
              `–î–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –¥–æ–∂–¥–∏—Ç–µ—Å—å, –∫–æ–≥–¥–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∑–∞–ø—É—Å—Ç–∏—Ç –ø—Ä–æ—Ü–µ—Å—Å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è.`,
              { reply_markup: voterKeyboard }
            );
          } catch (error) {
            logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫—É ${voter.telegramId}:`, error);
          }
        }
      }
    }
    
  } catch (error) {
    logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏:', error);
    await ctx.reply('üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
}));

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –æ—Ç–º–µ–Ω—ã –∑–∞—è–≤–∫–∏
applicationController.callbackQuery('cancel_application', handleError(async (ctx) => {
  await ctx.answerCallbackQuery('–ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞');
  
  // –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏
  if (ctx.session) {
    ctx.session.form = {};
    ctx.session.step = undefined;
  }
  
  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
  const mainKeyboard = await keyboardService.getMainKeyboard(ctx.from?.id);
  await ctx.reply(
    '‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.\n\n' +
    '–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏ –∑–∞–Ω–æ–≤–æ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /apply',
    { reply_markup: mainKeyboard }
  );
}));

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞—è–≤–∫–∏ –æ–±—ã—á–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
applicationController.callbackQuery(/^app_view_(\d+)$/, async (ctx) => {
  try {
    await ctx.answerCallbackQuery();
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∑–∞—è–≤–∫–∏ –∏–∑ callback –¥–∞–Ω–Ω—ã—Ö
    const applicationId = parseInt(ctx.match?.[1] || '0');
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏
    const applicationRepository = new ApplicationRepository();
    const application = await applicationRepository.findById(applicationId);
    
    if (!application) {
      await ctx.reply('‚ö†Ô∏è –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      return;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø–æ–¥–∞–≤—à–µ–≥–æ –∑–∞—è–≤–∫—É
    const userRepository = new UserRepository();
    const user = await userRepository.findById(application.userId);
    
    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –∫ –∑–∞—è–≤–∫–µ
    const questionRepository = new QuestionRepository();
    const questions = await questionRepository.findByApplicationId(applicationId);
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–∞–Ω–Ω—ã–º–∏ –∑–∞—è–≤–∫–∏
    const message = messageService.formatApplicationMessage(
      application,
      user.username,
      questions.length
    );
    
    // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π —Å –∑–∞—è–≤–∫–æ–π
    let keyboard = new InlineKeyboard();
    
    // –ï—Å–ª–∏ –∑–∞—è–≤–∫–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–∏, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
    if (application.status === ApplicationStatus.VOTING) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≥–æ–ª–æ—Å–æ–≤–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–Ω–µ–µ
      const voteRepository = new VoteRepository();
      const telegramId = ctx.from?.id || 0;
      const currentUser = await userRepository.findByTelegramId(telegramId);
      
      if (currentUser && currentUser.canVote) {
        const hasVoted = await voteRepository.hasVoted(applicationId, currentUser.id);
        keyboard = ButtonComponents.fullVoting(applicationId, hasVoted);
      }
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤–æ–ø—Ä–æ—Å–æ–≤, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    if (questions.length > 0) {
      keyboard.text(`üìù –í–æ–ø—Ä–æ—Å—ã (${questions.length})`, `view_questions_${applicationId}`).row();
    }
    
    // –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    keyboard.text("üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "back_to_main");
    
    await ctx.reply(message, { 
      reply_markup: keyboard,
      parse_mode: "Markdown"
    });
  } catch (error) {
    logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –∑–∞—è–≤–∫–∏:', error);
    await ctx.reply('üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –∑–∞—è–≤–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–≥–æ –≥–æ–ª–æ—Å–∞ –∑–∞ –∑–∞—è–≤–∫—É
applicationController.callbackQuery(/^vote_positive_(\d+)$/, async (ctx) => {
  try {
    await ctx.answerCallbackQuery();
    
    if (!ctx.from) return;
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∑–∞—è–≤–∫–∏ –∏–∑ callback –¥–∞–Ω–Ω—ã—Ö
    const applicationId = parseInt(ctx.match?.[1] || '0');
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∑–∞—è–≤–∫–µ
    const applicationRepository = new ApplicationRepository();
    const application = await applicationRepository.findById(applicationId);
    
    if (!application) {
      await ctx.reply('‚ö†Ô∏è –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.');
      return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞—è–≤–∫–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å—Ç–∞—Ç—É—Å–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
    if (application.status !== ApplicationStatus.VOTING) {
      await ctx.reply('‚ö†Ô∏è –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –ø–æ —ç—Ç–æ–π –∑–∞—è–≤–∫–µ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∏–ª–∏ –µ—â—ë –Ω–µ –Ω–∞—á–∞—Ç–æ.');
      return;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –≥–æ–ª–æ—Å—É—é—â–µ–≥–æ –∑–∞ –∑–∞—è–≤–∫—É
    const userRepository = new UserRepository();
    const voter = await userRepository.findByTelegramId(ctx.from.id);
    
    if (!voter) {
      await ctx.reply('‚ö†Ô∏è –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.');
      return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∞–≤–æ –≥–æ–ª–æ—Å–∞
    if (!voter.canVote) {
      await ctx.reply('‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –ø–æ –∑–∞—è–≤–∫–∞–º.');
      return;
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π –≥–æ–ª–æ—Å (—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Å—á–µ—Ç—á–∏–∫–æ–≤)
    const voteRepository = new VoteRepository();
    try {
      await voteRepository.addVote({
        applicationId,
        voterId: voter.id,
        voteType: VoteType.POSITIVE
      });
    } catch (error: any) {
      if (error.message?.includes('—É–∂–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª')) {
        await ctx.reply('‚ö†Ô∏è –í—ã —É–∂–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏ –ø–æ —ç—Ç–æ–π –∑–∞—è–≤–∫–µ.');
        return;
      }
      throw error;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Å—á–µ—Ç—á–∏–∫–∏ –≥–æ–ª–æ—Å–æ–≤
    const votes = await voteRepository.countVotes(applicationId);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
    await ctx.reply(
      messageService.formatVotingResultsMessage(
        applicationId,
        votes.positive,
        votes.negative,
        true
      )
    );
    
    logger.info(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${voter.id} –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª –ó–ê –∑–∞—è–≤–∫—É ${applicationId}`);
  } catch (error) {
    logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–∏ –∑–∞ –∑–∞—è–≤–∫—É:', error);
    await ctx.reply('üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–≥–æ –≥–æ–ª–æ—Å–∞ –∑–∞ –∑–∞—è–≤–∫—É
applicationController.callbackQuery(/^vote_negative_(\d+)$/, async (ctx) => {
  try {
    await ctx.answerCallbackQuery();
    
    if (!ctx.from) return;
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∑–∞—è–≤–∫–∏ –∏–∑ callback –¥–∞–Ω–Ω—ã—Ö
    const applicationId = parseInt(ctx.match?.[1] || '0');
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∑–∞—è–≤–∫–µ
    const applicationRepository = new ApplicationRepository();
    const application = await applicationRepository.findById(applicationId);
    
    if (!application) {
      await ctx.reply('‚ö†Ô∏è –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.');
      return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞—è–≤–∫–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å—Ç–∞—Ç—É—Å–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
    if (application.status !== ApplicationStatus.VOTING) {
      await ctx.reply('‚ö†Ô∏è –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –ø–æ —ç—Ç–æ–π –∑–∞—è–≤–∫–µ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∏–ª–∏ –µ—â—ë –Ω–µ –Ω–∞—á–∞—Ç–æ.');
      return;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –≥–æ–ª–æ—Å—É—é—â–µ–≥–æ –∑–∞ –∑–∞—è–≤–∫—É
    const userRepository = new UserRepository();
    const voter = await userRepository.findByTelegramId(ctx.from.id);
    
    if (!voter) {
      await ctx.reply('‚ö†Ô∏è –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.');
      return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∞–≤–æ –≥–æ–ª–æ—Å–∞
    if (!voter.canVote) {
      await ctx.reply('‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –ø–æ –∑–∞—è–≤–∫–∞–º.');
      return;
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –≥–æ–ª–æ—Å (—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Å—á–µ—Ç—á–∏–∫–æ–≤)
    const voteRepository = new VoteRepository();
    try {
      await voteRepository.addVote({
        applicationId,
        voterId: voter.id,
        voteType: VoteType.NEGATIVE
      });
    } catch (error: any) {
      if (error.message?.includes('—É–∂–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª')) {
        await ctx.reply('‚ö†Ô∏è –í—ã —É–∂–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏ –ø–æ —ç—Ç–æ–π –∑–∞—è–≤–∫–µ.');
        return;
      }
      throw error;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Å—á–µ—Ç—á–∏–∫–∏ –≥–æ–ª–æ—Å–æ–≤
    const votes = await voteRepository.countVotes(applicationId);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
    await ctx.reply(
      messageService.formatVotingResultsMessage(
        applicationId,
        votes.positive,
        votes.negative,
        false
      )
    );
    
    logger.info(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${voter.id} –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª –ü–†–û–¢–ò–í –∑–∞—è–≤–∫–∏ ${applicationId}`);
  } catch (error) {
    logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–∏ –ø—Ä–æ—Ç–∏–≤ –∑–∞—è–≤–∫–∏:', error);
    await ctx.reply('üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å"
applicationController.callbackQuery(/^ask_question_(\d+)$/, async (ctx) => {
  try {
    await ctx.answerCallbackQuery();
    
    if (!ctx.from) return;
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∑–∞—è–≤–∫–∏ –∏–∑ callback –¥–∞–Ω–Ω—ã—Ö
    const applicationId = parseInt(ctx.match?.[1] || '0');
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∑–∞—è–≤–∫–µ
    const applicationRepository = new ApplicationRepository();
    const application = await applicationRepository.findById(applicationId);
    
    if (!application) {
      await ctx.reply('‚ö†Ô∏è –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.');
      return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞—è–≤–∫–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∞–∫—Ç–∏–≤–Ω–æ–º —Å—Ç–∞—Ç—É—Å–µ
    if (application.status !== ApplicationStatus.PENDING && application.status !== ApplicationStatus.VOTING) {
      await ctx.reply('‚ö†Ô∏è –ù–µ–ª—å–∑—è –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞—è–≤–∫–µ.');
      return;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∑–∞–¥–∞—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å
    const userRepository = new UserRepository();
    const asker = await userRepository.findByTelegramId(ctx.from.id);
    
    if (!asker) {
      await ctx.reply('‚ö†Ô∏è –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.');
      return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞–¥–∞–µ—Ç –≤–æ–ø—Ä–æ—Å –∫ —Å–≤–æ–µ–π –∑–∞—è–≤–∫–µ
    if (asker.id === application.userId) {
      await ctx.reply('‚ö†Ô∏è –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∫ —Å–≤–æ–µ–π –∑–∞—è–≤–∫–µ.');
      return;
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∑–∞—è–≤–∫–∏ –≤ —Å–µ—Å—Å–∏–∏
    if (ctx.session) {
      ctx.session.step = 'waiting_question';
      ctx.session.applicationId = applicationId;
    }
    
    await ctx.reply(
      '‚ùì –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –∫ –∑–∞—è–≤–∏—Ç–µ–ª—é:\n\n' +
      '–í–æ–ø—Ä–æ—Å –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–∞–ø—Ä—è–º—É—é. ' +
      '–û—Ç–≤–µ—Ç –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –≤ –ª–∏—á–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.'
    );
    
  } catch (error) {
    logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –Ω–∞ –∑–∞–¥–∞–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞:', error);
    await ctx.reply('üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –≤–æ–ø—Ä–æ—Å–∞
applicationController.on('message', async (ctx, next) => {
  if (!ctx.message || !ctx.from || !ctx.message.text) return next();
  
  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —à–∞–≥ –≤–≤–æ–¥–∞ –≤–æ–ø—Ä–æ—Å–∞ –∫ –∑–∞—è–≤–∫–µ
  if (ctx.session?.step === 'waiting_question' && ctx.session.applicationId) {
    const questionText = ctx.message.text.trim();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –≤–æ–ø—Ä–æ—Å–∞
    if (questionText.length < 5) {
      await ctx.reply(
        '‚ùå –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –≤–æ–ø—Ä–æ—Å.\n\n' +
        '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω—ã–π –≤–æ–ø—Ä–æ—Å:'
      );
      return;
    }
    
    try {
      const applicationId = ctx.session.applicationId;
      
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∑–∞—è–≤–∫–µ
      const applicationRepository = new ApplicationRepository();
      const application = await applicationRepository.findById(applicationId);
      
      if (!application) {
        await ctx.reply('‚ö†Ô∏è –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.');
        ctx.session.step = undefined;
        ctx.session.applicationId = undefined;
        return;
      }
      
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      const userRepository = new UserRepository();
      const asker = await userRepository.findByTelegramId(ctx.from.id);
      const applicant = await userRepository.findById(application.userId);
      
      if (!asker || !applicant) {
        await ctx.reply('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.');
        ctx.session.step = undefined;
        ctx.session.applicationId = undefined;
        return;
      }
      
      // –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
      const questionRepository = new QuestionRepository();
      const questionId = await questionRepository.addQuestion({
        applicationId,
        askerId: asker.id,
        text: questionText
      });
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –∑–∞–¥–∞–≤—à–µ–º—É –≤–æ–ø—Ä–æ—Å
      await ctx.reply(
        `‚úÖ –í–∞—à –≤–æ–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${applicant.minecraftNickname}.\n\n` +
        '–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ –æ–Ω –æ—Ç–≤–µ—Ç–∏—Ç –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å.'
      );
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞—è–≤–∏—Ç–µ–ª—é
      if (botInstance) {
        try {
          // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å
          const keyboard = new InlineKeyboard()
            .text('üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å', `answer_question_${questionId}`);
          
          await botInstance.api.sendMessage(
            Number(applicant.telegramId),
            `‚ùì –í–∞–º –∑–∞–¥–∞–Ω –≤–æ–ø—Ä–æ—Å –ø–æ –≤–∞—à–µ–π –∑–∞—è–≤–∫–µ #${applicationId}:\n\n` +
            `–û—Ç: ${asker.username ? `@${asker.username}` : asker.minecraftNickname}\n` +
            `–í–æ–ø—Ä–æ—Å: ${questionText}\n\n` +
            `–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.`,
            { reply_markup: keyboard }
          );
        } catch (error) {
          logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤–æ–ø—Ä–æ—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${applicant.telegramId}:`, error);
        }
      }
      
      // –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏
      ctx.session.step = undefined;
      ctx.session.applicationId = undefined;
      
    } catch (error) {
      logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞:', error);
      await ctx.reply('üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–æ–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      
      // –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏
      ctx.session.step = undefined;
      ctx.session.applicationId = undefined;
    }
    
    return;
  }
  
  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —à–∞–≥ –≤–≤–æ–¥–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å
  if (ctx.session?.step === 'waiting_answer' && ctx.session.questionId) {
    const answerText = ctx.message.text.trim();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –æ—Ç–≤–µ—Ç–∞
    if (answerText.length < 3) {
      await ctx.reply(
        '‚ùå –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–≤–µ—Ç.\n\n' +
        '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–∞–π—Ç–µ –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç–≤–µ—Ç:'
      );
      return;
    }
    
    try {
      const questionId = ctx.session.questionId;
      
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≤–æ–ø—Ä–æ—Å–µ
      const questionRepository = new QuestionRepository();
      const question = await questionRepository.findById(questionId);
      
      if (!question) {
        await ctx.reply('‚ö†Ô∏è –í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.');
        ctx.session.step = undefined;
        ctx.session.questionId = undefined;
        return;
      }
      
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∑–∞—è–≤–∫–µ
      const applicationRepository = new ApplicationRepository();
      const application = await applicationRepository.findById(question.applicationId);
      
      if (!application) {
        await ctx.reply('‚ö†Ô∏è –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.');
        ctx.session.step = undefined;
        ctx.session.questionId = undefined;
        return;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—á–∞–µ—Ç –≤–ª–∞–¥–µ–ª–µ—Ü –∑–∞—è–≤–∫–∏
      if (application.userId !== ctx.from.id) {
        const userRepository = new UserRepository();
        const user = await userRepository.findByTelegramId(ctx.from.id);
        
        if (!user || user.id !== application.userId) {
          await ctx.reply('‚ö†Ô∏è –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –∫ —á—É–∂–æ–π –∑–∞—è–≤–∫–µ.');
          ctx.session.step = undefined;
          ctx.session.questionId = undefined;
          return;
        }
      }
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å
      await questionRepository.answerQuestion(questionId, answerText);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –æ—Ç–≤–µ—Ç–∏–≤—à–µ–º—É –Ω–∞ –≤–æ–ø—Ä–æ—Å
      await ctx.reply(
        '‚úÖ –í–∞—à –æ—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.'
      );
      
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∑–∞–¥–∞–≤—à–µ–≥–æ –≤–æ–ø—Ä–æ—Å
      const userRepository = new UserRepository();
      const asker = await userRepository.findById(question.askerId);
      const applicant = await userRepository.findById(application.userId);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –∑–∞–¥–∞–≤—à–µ–º—É –≤–æ–ø—Ä–æ—Å
      if (botInstance && asker) {
        try {
          await botInstance.api.sendMessage(
            Number(asker.telegramId),
            `üí¨ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å –∫ –∑–∞—è–≤–∫–µ #${application.id}:\n\n` +
            `–í–æ–ø—Ä–æ—Å: ${question.text}\n\n` +
            `–û—Ç–≤–µ—Ç –æ—Ç ${applicant.minecraftNickname}: ${answerText}`
          );
        } catch (error) {
          logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—Ç–≤–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${asker.telegramId}:`, error);
        }
      }
      
      // –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏
      ctx.session.step = undefined;
      ctx.session.questionId = undefined;
      
    } catch (error) {
      logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞:', error);
      await ctx.reply('üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      
      // –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏
      ctx.session.step = undefined;
      ctx.session.questionId = undefined;
    }
    
    return;
  }
  
  return next();
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å"
applicationController.callbackQuery(/^answer_question_(\d+)$/, async (ctx) => {
  try {
    await ctx.answerCallbackQuery();
    
    if (!ctx.from) return;
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º ID –≤–æ–ø—Ä–æ—Å–∞ –∏–∑ callback –¥–∞–Ω–Ω—ã—Ö
    const questionId = parseInt(ctx.match?.[1] || '0');
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≤–æ–ø—Ä–æ—Å–µ
    const questionRepository = new QuestionRepository();
    const question = await questionRepository.findById(questionId);
    
    if (!question) {
      await ctx.reply('‚ö†Ô∏è –í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.');
      return;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∑–∞—è–≤–∫–µ
    const applicationRepository = new ApplicationRepository();
    const application = await applicationRepository.findById(question.applicationId);
    
    if (!application) {
      await ctx.reply('‚ö†Ô∏è –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.');
      return;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userRepository = new UserRepository();
    const user = await userRepository.findByTelegramId(ctx.from.id);
    
    if (!user) {
      await ctx.reply('‚ö†Ô∏è –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.');
      return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—á–∞–µ—Ç –≤–ª–∞–¥–µ–ª–µ—Ü –∑–∞—è–≤–∫–∏
    if (user.id !== application.userId) {
      await ctx.reply('‚ö†Ô∏è –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –∫ —á—É–∂–æ–π –∑–∞—è–≤–∫–µ.');
      return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∞ –≤–æ–ø—Ä–æ—Å –µ—â–µ –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª–∏
    if (question.answer) {
      await ctx.reply(
        '‚ö†Ô∏è –í—ã —É–∂–µ –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å.\n\n' +
        `–í–æ–ø—Ä–æ—Å: ${question.text}\n` +
        `–í–∞—à –æ—Ç–≤–µ—Ç: ${question.answer}`
      );
      return;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∑–∞–¥–∞–≤—à–µ–≥–æ –≤–æ–ø—Ä–æ—Å
    const asker = await userRepository.findById(question.askerId);
    
    if (!asker) {
      await ctx.reply('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ, –∑–∞–¥–∞–≤—à–µ–º –≤–æ–ø—Ä–æ—Å.');
      return;
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –≤–æ–ø—Ä–æ—Å–∞ –≤ —Å–µ—Å—Å–∏–∏
    if (ctx.session) {
      ctx.session.step = 'waiting_answer';
      ctx.session.questionId = questionId;
    }
    
    await ctx.reply(
      `üí¨ –û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ—Ç ${asker.username ? `@${asker.username}` : asker.minecraftNickname}:\n\n` +
      `${question.text}\n\n` +
      '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç:'
    );
    
  } catch (error) {
    logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –Ω–∞ –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å:', error);
    await ctx.reply('üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –∫ –∑–∞—è–≤–∫–µ
applicationController.callbackQuery(/^view_questions_(\d+)$/, async (ctx) => {
  try {
    await ctx.answerCallbackQuery();
    
    if (!ctx.from) return;
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∑–∞—è–≤–∫–∏ –∏–∑ callback –¥–∞–Ω–Ω—ã—Ö
    const applicationId = parseInt(ctx.match?.[1] || '0');
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∑–∞—è–≤–∫–µ
    const applicationRepository = new ApplicationRepository();
    const application = await applicationRepository.findById(applicationId);
    
    if (!application) {
      await ctx.reply('‚ö†Ô∏è –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.');
      return;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userRepository = new UserRepository();
    const currentUser = await userRepository.findByTelegramId(ctx.from.id);
    const applicant = await userRepository.findById(application.userId);
    
    if (!currentUser) {
      await ctx.reply('‚ö†Ô∏è –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.');
      return;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã –∫ –∑–∞—è–≤–∫–µ
    const questionRepository = new QuestionRepository();
    const questions = await questionRepository.findByApplicationId(applicationId);
    
    if (questions.length === 0) {
      await ctx.reply('üìù –ö —ç—Ç–æ–π –∑–∞—è–≤–∫–µ –µ—â–µ –Ω–µ –∑–∞–¥–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞.');
      return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä –≤–æ–ø—Ä–æ—Å–æ–≤ (—Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –∑–∞—è–≤–∫–∏, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∏–ª–∏ —Ç–æ—Ç, –∫—Ç–æ –∑–∞–¥–∞–ª –≤–æ–ø—Ä–æ—Å)
    const isAdmin = RoleManager.isAdmin(currentUser);
    const isApplicant = currentUser.id === application.userId;
    
    // –§–∏–ª—å—Ç—Ä—É–µ–º –≤–æ–ø—Ä–æ—Å—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–∞–≤
    const accessibleQuestions = isAdmin || isApplicant
      ? questions
      : questions.filter(q => q.askerId === currentUser.id);
    
    if (accessibleQuestions.length === 0) {
      await ctx.reply('üìù –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –≤–æ–ø—Ä–æ—Å–∞–º —ç—Ç–æ–π –∑–∞—è–≤–∫–∏.');
      return;
    }
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏
    let message = `üìù –í–æ–ø—Ä–æ—Å—ã –∫ –∑–∞—è–≤–∫–µ #${applicationId} (${applicant.minecraftNickname}):\n\n`;
    
    for (const question of accessibleQuestions) {
      const asker = await userRepository.findById(question.askerId);
      
      message += `‚ùì *–í–æ–ø—Ä–æ—Å –æ—Ç ${asker.username ? `@${asker.username}` : asker.minecraftNickname}:*\n`;
      message += `${question.text}\n\n`;
      
      if (question.answer) {
        message += `üí¨ *–û—Ç–≤–µ—Ç:*\n`;
        message += `${question.answer}\n\n`;
      } else {
        message += `‚è≥ *–û—Ç–≤–µ—Ç –æ–∂–∏–¥–∞–µ—Ç—Å—è*\n\n`;
      }
    }
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏
    await ctx.reply(message, { parse_mode: 'Markdown' });
    
  } catch (error) {
    logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –≤–æ–ø—Ä–æ—Å–æ–≤:', error);
    await ctx.reply('üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–≤–æ–∏—Ö –∑–∞—è–≤–æ–∫
applicationController.command("applications", handleError(async (ctx: MyContext) => {
  if (!ctx.from) return;
  
  const telegramId = ctx.from.id;
  const userRepository = new UserRepository();
  
  // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const user = await userRepository.findByTelegramId(telegramId);
  
  if (!user) {
    await ctx.reply(
      '‚ö†Ô∏è –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.\n\n' +
      '–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /start.'
    );
    return;
  }
  
  // –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const applicationRepository = new ApplicationRepository();
  const applications = await applicationRepository.findAllApplicationsByUserId(user.id);
  
  if (applications.length === 0) {
    const keyboard = await keyboardService.getMainKeyboard(user.telegramId);
    await ctx.reply(
      '‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –ø–æ–¥–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫.\n\n' +
      '–ß—Ç–æ–±—ã –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /apply –∏–ª–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.',
      { 
        reply_markup: keyboard,
        parse_mode: "Markdown"
      }
    );
    return;
  }
  
  // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –∑–∞—è–≤–æ–∫
  let message = 'üìã *–í–∞—à–∏ –∑–∞—è–≤–∫–∏:*\n\n';
  
  applications.forEach((app, index) => {
    const status = app.status === ApplicationStatus.PENDING ? '‚è≥ –û–∂–∏–¥–∞–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è' :
                  app.status === ApplicationStatus.VOTING ? 'üó≥Ô∏è –ù–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–∏' :
                  app.status === ApplicationStatus.APPROVED ? '‚úÖ –û–¥–æ–±—Ä–µ–Ω–∞' :
                  app.status === ApplicationStatus.REJECTED ? '‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–∞' :
                  app.status === ApplicationStatus.EXPIRED ? '‚è∞ –ò—Å—Ç–µ–∫–ª–∞' : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    
    const createdDate = app.createdAt.toLocaleString('ru-RU');
    
    message += `*${index + 1}.* –ó–∞—è–≤–∫–∞ #${app.id} (${status})\n` +
               `üìÖ –°–æ–∑–¥–∞–Ω–∞: ${createdDate}\n\n`;
  });
  
  message += '–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞—è–≤–∫–µ.';
  
  // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞—è–≤–æ–∫
  const keyboard = new InlineKeyboard();
  
  applications.forEach((app, index) => {
    keyboard.text(`–ó–∞—è–≤–∫–∞ #${app.id}`, `show_application_${app.id}`).row();
  });
  
  keyboard.text('üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'back_to_main');
  
  await ctx.reply(message, {
    reply_markup: keyboard,
    parse_mode: "Markdown"
  });
}));

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π –∑–∞—è–≤–∫–∏
applicationController.callbackQuery(/^show_application_(\d+)$/, handleError(async (ctx) => {
  if (!ctx.from) return;
  
  await ctx.answerCallbackQuery();
  
  const applicationId = parseInt(ctx.match?.[1] || '0');
  const telegramId = ctx.from.id;
  
  const userRepository = new UserRepository();
  const user = await userRepository.findByTelegramId(telegramId);
  
  if (!user) {
    await ctx.reply(
      '‚ö†Ô∏è –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.\n\n' +
      '–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /start.'
    );
    return;
  }
  
  // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏
  const applicationRepository = new ApplicationRepository();
  const application = await applicationRepository.findById(applicationId);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ª–∏ –∑–∞—è–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
  if (application.userId !== user.id) {
    await ctx.reply(
      '‚ö†Ô∏è –≠—Ç–∞ –∑–∞—è–≤–∫–∞ –≤–∞–º –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç.'
    );
    return;
  }
  
  // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –∫ –∑–∞—è–≤–∫–µ
  const questionRepository = new QuestionRepository();
  const questions = await questionRepository.findByApplicationId(applicationId);
  
  // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞—è–≤–∫–µ
  const status = application.status === ApplicationStatus.PENDING ? '‚è≥ –û–∂–∏–¥–∞–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è' :
                application.status === ApplicationStatus.VOTING ? 'üó≥Ô∏è –ù–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–∏' :
                application.status === ApplicationStatus.APPROVED ? '‚úÖ –û–¥–æ–±—Ä–µ–Ω–∞' :
                application.status === ApplicationStatus.REJECTED ? '‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–∞' :
                application.status === ApplicationStatus.EXPIRED ? '‚è∞ –ò—Å—Ç–µ–∫–ª–∞' : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
  
  const createdDate = application.createdAt.toLocaleString('ru-RU');
  
  let message = `üìã *–ó–∞—è–≤–∫–∞ #${application.id}*\n\n` +
               `üéÆ *–ù–∏–∫–Ω–µ–π–º:* ${escapeMarkdown(application.minecraftNickname)}\n` +
               `üìä *–°—Ç–∞—Ç—É—Å:* ${status}\n` +
               `üìÖ *–î–∞—Ç–∞ –ø–æ–¥–∞—á–∏:* ${createdDate}\n\n` +
               `üìù *–ü—Ä–∏—á–∏–Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è:*\n${escapeMarkdown(application.reason)}`;
  
  // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–∏, –µ—Å–ª–∏ –∑–∞—è–≤–∫–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–∏
  if (application.status === ApplicationStatus.VOTING) {
    message += `\n\nüó≥Ô∏è *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–∏:*\n` +
              `üëç –ó–∞: ${application.positiveVotes}\n` +
              `üëé –ü—Ä–æ—Ç–∏–≤: ${application.negativeVotes}`;
    
    if (application.votingEndsAt) {
      const endsDate = new Date(application.votingEndsAt).toLocaleString('ru-RU');
      message += `\n‚è±Ô∏è *–û–∫–æ–Ω—á–∞–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è:* ${endsDate}`;
    }
  }
  
  // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–æ–ø—Ä–æ—Å–∞—Ö
  if (questions.length > 0) {
    const unansweredCount = questions.filter(q => !q.answer).length;
    message += `\n\n‚ùì *–í–æ–ø—Ä–æ—Å—ã:* ${questions.length} (–Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö: ${unansweredCount})`;
  }
  
  // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
  const keyboard = new InlineKeyboard();
  
  // –ï—Å–ª–∏ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
  if (questions.length > 0) {
    keyboard.text(`üìù –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–æ–ø—Ä–æ—Å—ã (${questions.length})`, `user_view_questions_${applicationId}`).row();
  }
  
  // –í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É –∑–∞—è–≤–æ–∫
  keyboard.text('üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∑–∞—è–≤–∫–µ', `show_application_${applicationId}`);
  keyboard.text('üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'back_to_main');
  
  await ctx.reply(message, {
    reply_markup: keyboard,
    parse_mode: "Markdown"
  });
}));

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É –∑–∞—è–≤–æ–∫
applicationController.callbackQuery('applications_list', handleError(async (ctx) => {
  if (!ctx.from) return;
  
  await ctx.answerCallbackQuery();
  
  const telegramId = ctx.from.id;
  const userRepository = new UserRepository();
  
  // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const user = await userRepository.findByTelegramId(telegramId);
  
  if (!user) {
    await ctx.reply(
      '‚ö†Ô∏è –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.\n\n' +
      '–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /start.'
    );
    return;
  }
  
  // –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const applicationRepository = new ApplicationRepository();
  const applications = await applicationRepository.findAllApplicationsByUserId(user.id);
  
  if (applications.length === 0) {
    const keyboard = await keyboardService.getMainKeyboard(user.telegramId);
    await ctx.reply(
      '‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –ø–æ–¥–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫.\n\n' +
      '–ß—Ç–æ–±—ã –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /apply –∏–ª–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.',
      { 
        reply_markup: keyboard,
        parse_mode: "Markdown"
      }
    );
    return;
  }
  
  // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –∑–∞—è–≤–æ–∫
  let message = 'üìã *–í–∞—à–∏ –∑–∞—è–≤–∫–∏:*\n\n';
  
  applications.forEach((app, index) => {
    const status = app.status === ApplicationStatus.PENDING ? '‚è≥ –û–∂–∏–¥–∞–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è' :
                  app.status === ApplicationStatus.VOTING ? 'üó≥Ô∏è –ù–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–∏' :
                  app.status === ApplicationStatus.APPROVED ? '‚úÖ –û–¥–æ–±—Ä–µ–Ω–∞' :
                  app.status === ApplicationStatus.REJECTED ? '‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–∞' :
                  app.status === ApplicationStatus.EXPIRED ? '‚è∞ –ò—Å—Ç–µ–∫–ª–∞' : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    
    const createdDate = app.createdAt.toLocaleString('ru-RU');
    
    message += `*${index + 1}.* –ó–∞—è–≤–∫–∞ #${app.id} (${status})\n` +
               `üìÖ –°–æ–∑–¥–∞–Ω–∞: ${createdDate}\n\n`;
  });
  
  message += '–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞—è–≤–∫–µ.';
  
  // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞—è–≤–æ–∫
  const keyboard = new InlineKeyboard();
  
  applications.forEach((app, index) => {
    keyboard.text(`–ó–∞—è–≤–∫–∞ #${app.id}`, `show_application_${app.id}`).row();
  });
  
  keyboard.text('üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'back_to_main');
  
  await ctx.reply(message, {
    reply_markup: keyboard,
    parse_mode: "Markdown"
  });
}));

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
applicationController.callbackQuery(/^user_view_questions_(\d+)$/, handleError(async (ctx) => {
  if (!ctx.from) return;
  
  await ctx.answerCallbackQuery();
  
  const applicationId = parseInt(ctx.match?.[1] || '0');
  const telegramId = ctx.from.id;
  
  // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const userRepository = new UserRepository();
  const user = await userRepository.findByTelegramId(telegramId);
  
  if (!user) {
    await ctx.reply('‚ö†Ô∏è –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.');
    return;
  }
  
  // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏
  const applicationRepository = new ApplicationRepository();
  const application = await applicationRepository.findById(applicationId);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ª–∏ –∑–∞—è–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
  if (application.userId !== user.id) {
    await ctx.reply('‚ö†Ô∏è –≠—Ç–∞ –∑–∞—è–≤–∫–∞ –≤–∞–º –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç.');
    return;
  }
  
  // –ü–æ–ª—É—á–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã –∫ –∑–∞—è–≤–∫–µ
  const questionRepository = new QuestionRepository();
  const questions = await questionRepository.findByApplicationId(applicationId);
  
  if (questions.length === 0) {
    await ctx.reply(
      '‚ö†Ô∏è –ö —ç—Ç–æ–π –∑–∞—è–≤–∫–µ –ø–æ–∫–∞ –Ω–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤.',
      { 
        reply_markup: new InlineKeyboard()
          .text('üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∑–∞—è–≤–∫–µ', `show_application_${applicationId}`)
      }
    );
    return;
  }
  
  // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–¥–∞–≤—à–∏—Ö –≤–æ–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
  const askerIds = [...new Set(questions.map(q => q.askerId))];
  const users = await Promise.all(askerIds.map(id => userRepository.findById(id)));
  
  // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  const userMap: Record<number, User> = {};
  users.forEach(user => {
    if (user) {
      userMap[user.id] = user;
    }
  });
  
  // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏
  let message = `üìù *–í–æ–ø—Ä–æ—Å—ã –ø–æ –≤–∞—à–µ–π –∑–∞—è–≤–∫–µ #${applicationId}*\n\n`;
  
  const keyboard = new InlineKeyboard();
  
  questions.forEach((question, index) => {
    const asker = userMap[question.askerId];
    const askerName = asker ? (asker.username ? `@${escapeMarkdown(asker.username)}` : '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä') : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
    
    message += `*–í–æ–ø—Ä–æ—Å #${index + 1}* (–æ—Ç ${askerName}):\n${escapeMarkdown(question.text)}\n`;
    
    if (question.answer) {
      message += `\n*–í–∞—à –æ—Ç–≤–µ—Ç:*\n${escapeMarkdown(question.answer)}\n`;
    } else {
      message += "\n*–û—Ç–≤–µ—Ç:* –ù–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω\n";
      // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å
      keyboard.text(`–û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å #${index + 1}`, `answer_question_${question.id}`).row();
    }
    
    if (index < questions.length - 1) {
      message += "\n---------------------\n\n";
    }
  });
  
  // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞
  keyboard.text('üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∑–∞—è–≤–∫–µ', `show_application_${applicationId}`);
  
  await ctx.reply(message, {
    reply_markup: keyboard,
    parse_mode: "Markdown"
  });
}));

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å
applicationController.callbackQuery(/^answer_question_(\d+)$/, handleError(async (ctx) => {
  if (!ctx.from) return;
  
  await ctx.answerCallbackQuery();
  
  const questionId = parseInt(ctx.match?.[1] || '0');
  
  // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å
  await ctx.reply(
    '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å:',
    { parse_mode: "Markdown" }
  );
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –≤–æ–ø—Ä–æ—Å–∞ –≤ —Å–µ—Å—Å–∏–∏
  if (ctx.session) {
    ctx.session.step = 'waiting_question_answer';
    ctx.session.questionId = questionId;
  }
}));

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å
applicationController.on('message:text', async (ctx, next) => {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ–º –ª–∏ –º—ã –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å
  if (!ctx.session || ctx.session.step !== 'waiting_question_answer' || !ctx.session.questionId) {
    await next();
    return;
  }
  
  try {
    const questionId = ctx.session.questionId;
    const answerText = ctx.message.text;
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å–∞
    const questionRepository = new QuestionRepository();
    const question = await questionRepository.findById(questionId);
    
    if (!question) {
      await ctx.reply(
        '‚ö†Ô∏è –í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –∫ —Å–ø–∏—Å–∫—É –∑–∞—è–≤–æ–∫.',
        { parse_mode: "Markdown" }
      );
      return;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏
    const applicationRepository = new ApplicationRepository();
    const application = await applicationRepository.findById(question.applicationId);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ª–∏ –∑–∞—è–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    const userRepository = new UserRepository();
    const user = await userRepository.findByTelegramId(ctx.from.id);
    
    if (!user || application.userId !== user.id) {
      await ctx.reply(
        '‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å.',
        { parse_mode: "Markdown" }
      );
      return;
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
    await questionRepository.answerQuestion(questionId, answerText);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –∑–∞–¥–∞–≤—à–µ–º—É –≤–æ–ø—Ä–æ—Å
    const bot = getBotInstance();
    if (bot) {
      try {
        const asker = await userRepository.findById(question.askerId);
        if (asker) {
          const notificationMessage = `‚úÖ *–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å –ø–æ –∑–∞—è–≤–∫–µ #${question.applicationId}*\n\n` +
                                    `*–í–∞—à –≤–æ–ø—Ä–æ—Å:* ${escapeMarkdown(question.text)}\n\n` +
                                    `*–û—Ç–≤–µ—Ç:* ${escapeMarkdown(answerText)}`;
          
          await bot.api.sendMessage(asker.telegramId, notificationMessage, {
            parse_mode: "Markdown"
          });
        }
      } catch (error) {
        logger.error(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –æ—Ç–≤–µ—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å: ${error}`);
      }
    }
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –æ—Ç–≤–µ—Ç–µ
    const keyboard = new InlineKeyboard()
      .text('üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤–æ–ø—Ä–æ—Å–∞–º', `user_view_questions_${question.applicationId}`)
      .row()
      .text('üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∑–∞—è–≤–∫–µ', `show_application_${question.applicationId}`);
    
    await ctx.reply(
      '‚úÖ –í–∞—à –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É!',
      { reply_markup: keyboard, parse_mode: "Markdown" }
    );
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    ctx.session.step = undefined;
    ctx.session.questionId = undefined;
    
  } catch (error) {
    logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å: ${error}`);
    await ctx.reply(
      '‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
      { parse_mode: "Markdown" }
    );
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    if (ctx.session) {
      ctx.session.step = undefined;
      ctx.session.questionId = undefined;
    }
  }
});

export { applicationController };