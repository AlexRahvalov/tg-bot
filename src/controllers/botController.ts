import { Composer, Bot, InlineKeyboard } from 'grammy';
import type { MyContext } from '../index';
import { keyboardService } from '../services/keyboardService';
import { handleErrorWithContext } from '../utils/errorHandler';
import { UserRepository } from '../db/repositories/userRepository';
import { UserRole } from '../models/types';
import { logger } from '../utils/logger';
import { messageService } from '../services/messageService';
import { ApplicationRepository } from '../db/repositories/applicationRepository';
import { ProfileService } from '../services/profileService';
import { formatDate } from '../utils/stringUtils';
import config from '../config/env';
import { UserUtils } from '../utils/userUtils';
import { ButtonComponents } from '../components/buttons';

// –°–æ–∑–¥–∞–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤
const userRepository = new UserRepository();
const profileService = new ProfileService();

// –°–æ–∑–¥–∞–µ–º –∫–æ–º–ø–æ–∑–µ—Ä –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
const botController = new Composer<MyContext>();

// Middleware –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
botController.use(async (ctx, next) => {
  try {
    if (!ctx.from) return await next();
    
    const telegramId = ctx.from.id;
    const adminTelegramId = parseInt(config.adminTelegramId);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
    const isConfigAdmin = !isNaN(adminTelegramId) && telegramId === adminTelegramId;
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    const user = await userRepository.findByTelegramId(telegramId);
    
    if (user) {
      // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ, –µ—Å–ª–∏ –æ–Ω–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å
      const username = ctx.from.username || `user_${telegramId}`;
      
      if (user.username !== username || (isConfigAdmin && user.role !== UserRole.ADMIN)) {
        // –û–±–Ω–æ–≤–ª—è–µ–º username –∏ —Ä–æ–ª—å, –µ—Å–ª–∏ —ç—Ç–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
        await userRepository.update(user.id, {
          username,
          ...(isConfigAdmin ? { role: UserRole.ADMIN, canVote: true } : {})
        });
        
        logger.info(`–û–±–Ω–æ–≤–ª–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: ${username} (${telegramId})`);
      }
    }
    
    return await next();
  } catch (error) {
    logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    return await next();
  }
});

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥
async function showStartMessage(ctx: MyContext) {
  try {
    const keyboard = await keyboardService.getMainKeyboard(ctx.from?.id);
    
    await ctx.reply(
      '–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ Minecraft-—Å–µ—Ä–≤–µ—Ä—É. –° –º–æ–µ–π –ø–æ–º–æ—â—å—é –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ.\n\n' +
      '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É /apply –¥–ª—è –Ω–∞—á–∞–ª–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏.',
      { reply_markup: keyboard }
    );
  } catch (error) {
    await handleErrorWithContext(ctx, error, "showStartMessage");
  }
}

async function showHelpMessage(ctx: MyContext) {
  try {
    const keyboard = await keyboardService.getMainKeyboard(ctx.from?.id);
    
    await ctx.reply(
      '–Ø –ø–æ–º–æ–≥–∞—é —É–ø—Ä–∞–≤–ª—è—Ç—å –¥–æ—Å—Ç—É–ø–æ–º –∫ Minecraft-—Å–µ—Ä–≤–µ—Ä—É.\n\n' +
      '–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n' +
      '/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n' +
      '/apply - –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ\n' +
      '/status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏\n' +
      '/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É\n\n' +
      '–î–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:\n' +
      '/admin - –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞',
      { reply_markup: keyboard }
    );
  } catch (error) {
    await handleErrorWithContext(ctx, error, "showHelpMessage");
  }
}

async function showServerInfo(ctx: MyContext) {
  try {
    const keyboard = await keyboardService.getMainKeyboard(ctx.from?.id);
    
    // –û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    const serverInfo = '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞—à–µ–º Minecraft-—Å–µ—Ä–≤–µ—Ä–µ:\n\n' +
      'üè† IP-–∞–¥—Ä–µ—Å: play.example.com\n' +
      'üéÆ –í–µ—Ä—Å–∏—è: 1.20.2\n' +
      'üë• –†–µ–∂–∏–º –∏–≥—Ä—ã: –í—ã–∂–∏–≤–∞–Ω–∏–µ\n' +
      'üëÆ –¢–∏–ø –¥–æ—Å—Ç—É–ø–∞: –î–µ–º–æ–∫—Ä–∞—Ç–∏—á–µ—Å–∫–∏–π –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫\n\n' +
      '–ß—Ç–æ–±—ã –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /apply –∏–ª–∏ –∫–Ω–æ–ø–∫—É "–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É".';
      
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await ctx.reply(serverInfo, { reply_markup: keyboard });
    
    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–æ–π
    if (ctx.from?.id) {
      try {
        const user = await userRepository.findByTelegramId(ctx.from.id);
        if (user && user.role === UserRole.ADMIN) {
          const adminKeyboard = keyboardService.getAdminPanelKeyboard();
          await ctx.reply("–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", { reply_markup: adminKeyboard });
        }
      } catch (error) {
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", error);
      }
    }
  } catch (error) {
    await handleErrorWithContext(ctx, error, "showServerInfo");
  }
}

async function showAdminPanel(ctx: MyContext) {
  try {
    if (!ctx.from) return;
    
    const user = await userRepository.findByTelegramId(ctx.from.id);
    
    if (!user || user.role !== UserRole.ADMIN) {
      const keyboard = await keyboardService.getMainKeyboard(ctx.from.id);
      return await ctx.reply(
        "‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.",
        { reply_markup: keyboard }
      );
    }
    
    const keyboard = keyboardService.getAdminPanelKeyboard();
    
    await ctx.reply(
      "üõ†Ô∏è –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n" +
      "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
      { reply_markup: keyboard }
    );
  } catch (error) {
    await handleErrorWithContext(ctx, error, "showAdminPanel");
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
botController.command("start", async (ctx) => {
  try {
    const keyboard = await keyboardService.getMainKeyboard(ctx.from?.id);
    await ctx.reply(messageService.getStartMessage(), { reply_markup: keyboard });
  } catch (error) {
    logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /start:", error);
    await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
  }
});

botController.command("help", async (ctx) => {
  try {
    const message = `ü§ñ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:

–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥
/apply - –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ

–ü—Ä–æ—Ñ–∏–ª—å –∏ —Ä–µ–π—Ç–∏–Ω–≥:
/profile - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å
/viewprofile - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª–∏ –¥—Ä—É–≥–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
/members - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –æ—Ü–µ–Ω–∫–∏

–î–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:
/admin - –û—Ç–∫—Ä—ã—Ç—å –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
/update_all_voting_rights - –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–∞–≤–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤

–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ –ª—é–±–æ–π –∫–æ–º–∞–Ω–¥–µ, –ø—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ –µ—ë.`;
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Markdown, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞
    await ctx.reply(message);
  } catch (error) {
    logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /help:", error);
  }
});

botController.command("admin", async (ctx) => {
  try {
    if (!ctx.from) return;
    
    const userRepository = new UserRepository();
    const user = await userRepository.findByTelegramId(ctx.from.id);
    
    if (!user || user.role !== UserRole.ADMIN) {
      const keyboard = await keyboardService.getMainKeyboard(ctx.from.id);
      await UserUtils.handleAccessDenied(
        ctx, 
        'botController.admin', 
        { telegramId: ctx.from.id, username: ctx.from?.username, role: user?.role }
      );
      return;
    }
    
    const keyboard = keyboardService.getAdminPanelKeyboard();
    await ctx.reply(
      "üõ†Ô∏è –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n" +
      "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
      { reply_markup: keyboard }
    );
  } catch (error) {
    logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /admin:", error);
    await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥ —Å –∫–Ω–æ–ø–æ–∫
botController.hears("üìù –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É", async (ctx) => {
  try {
    await ctx.reply(
      'üìù –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ.\n\n' +
      '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –Ω–∏–∫–Ω–µ–π–º –≤ Minecraft:'
    );
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —à–∞–≥ –≤ —Å–µ—Å—Å–∏–∏
    if (ctx.session) {
      ctx.session.step = 'waiting_nickname';
      ctx.session.form = {};
    }
  } catch (error) {
    logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏:", error);
    await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
  }
});

botController.hears("üìä –°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏", async (ctx) => {
  try {
    if (!ctx.from) return;
    
    const telegramId = ctx.from.id;
    const userRepository = new UserRepository();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    const user = await userRepository.findByTelegramId(telegramId);
    
    if (!user) {
      await ctx.reply(
        '‚ö†Ô∏è –í—ã –µ—â–µ –Ω–µ –ø–æ–¥–∞–ª–∏ –∑–∞—è–≤–∫—É.\n\n' +
        '–ß—Ç–æ–±—ã –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /apply –∏–ª–∏ –∫–Ω–æ–ø–∫—É "–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É"'
      );
      return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (user.role === UserRole.MEMBER || user.role === UserRole.ADMIN) {
      await ctx.reply(
        '‚úÖ –í—ã —è–≤–ª—è–µ—Ç–µ—Å—å —á–ª–µ–Ω–æ–º —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ –∏ –∏–º–µ–µ—Ç–µ –¥–æ—Å—Ç—É–ø –∫ —Å–µ—Ä–≤–µ—Ä—É!\n\n' +
        '–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –¥–æ—Å—Ç—É–ø–æ–º, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.'
      );
      return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏
    const applicationRepository = new ApplicationRepository();
    const activeApplications = await applicationRepository.findActiveApplicationsByUserId(user.id);
    
    if (activeApplications.length === 0) {
      await ctx.reply(
        '‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫.\n\n' +
        '–í–æ–∑–º–æ–∂–Ω–æ, –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ —É–∂–µ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∞ –∏–ª–∏ –≤—ã –µ—â–µ –Ω–µ –ø–æ–¥–∞–≤–∞–ª–∏ –∑–∞—è–≤–∫—É.\n' +
        '–ß—Ç–æ–±—ã –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /apply –∏–ª–∏ –∫–Ω–æ–ø–∫—É "–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É"'
      );
      return;
    }
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏
    if (activeApplications[0]) {
      await messageService.sendApplicationStatus(ctx, activeApplications[0]);
    } else {
      await ctx.reply('‚ö†Ô∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞—è–≤–∫–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.');
    }
  } catch (error) {
    logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏:', error);
    await ctx.reply('üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.');
  }
});

botController.hears("‚ÑπÔ∏è –ü–æ–º–æ—â—å", async (ctx) => {
  try {
    const keyboard = await keyboardService.getMainKeyboard(ctx.from?.id);
    await ctx.reply(messageService.getHelpMessage(), { reply_markup: keyboard });
  } catch (error) {
    logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–Ω–æ–ø–∫–∏ –ø–æ–º–æ—â–∏:", error);
    await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
  }
});

botController.hears("üìã –û —Å–µ—Ä–≤–µ—Ä–µ", async (ctx) => {
  try {
    const keyboard = await keyboardService.getMainKeyboard(ctx.from?.id);
    await ctx.reply(messageService.getServerInfoMessage(), { reply_markup: keyboard });
  } catch (error) {
    logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–Ω–æ–ø–∫–∏ –æ —Å–µ—Ä–≤–µ—Ä–µ:", error);
    await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
  }
});

botController.hears("üõ†Ô∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", async (ctx) => {
  try {
    if (!ctx.from) return;
    
    const userRepository = new UserRepository();
    const user = await userRepository.findByTelegramId(ctx.from.id);
    
    if (!user || user.role !== UserRole.ADMIN) {
      await UserUtils.handleAccessDenied(ctx, 'admin_panel');
      return;
    }
    
    const keyboard = keyboardService.getAdminPanelKeyboard();
    await ctx.reply(
      "üõ†Ô∏è –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n" +
      "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
      { reply_markup: keyboard }
    );
  } catch (error) {
    logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–Ω–æ–ø–∫–∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏:", error);
    await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
botController.callbackQuery("admin_back_to_main", async (ctx) => {
  try {
    await ctx.answerCallbackQuery("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é");
    
    const keyboard = await keyboardService.getMainKeyboard(ctx.from?.id);
    await ctx.reply(
      "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–æ–º –∫ Minecraft-—Å–µ—Ä–≤–µ—Ä—É.\n\n" +
      "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º:",
      { reply_markup: keyboard }
    );
  } catch (error) {
    logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", error);
    await ctx.answerCallbackQuery("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
botController.callbackQuery("back_to_main", async (ctx) => {
  try {
    await ctx.answerCallbackQuery();
    
    if (!ctx.from) return;
    
    const keyboard = await keyboardService.getMainKeyboard(ctx.from.id);
    await ctx.reply(
      "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–æ–º –∫ Minecraft-—Å–µ—Ä–≤–µ—Ä—É.\n\n" +
      "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:", 
      { reply_markup: keyboard }
    );
  } catch (error) {
    logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', error);
    await ctx.reply('üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è
botController.hears("üë§ –ü—Ä–æ—Ñ–∏–ª—å", async (ctx) => {
  try {
    if (!ctx.from) return;
    
    const telegramId = ctx.from.id;
    const user = await userRepository.findByTelegramId(telegramId);
    
    if (!user) {
      await ctx.reply('‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–∞–π—Ç–µ –∑–∞—è–≤–∫—É –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ.');
      return;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const profile = await profileService.getProfile(telegramId);
    
    if (!profile) {
      await ctx.reply('‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –µ—â–µ –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —Å–æ–æ–±—â–µ—Å—Ç–≤–∞.');
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –æ—Ü–µ–Ω–æ–∫
    const ratingHistory = await profileService.getRatingHistory(profile.user_id);
    
    const reputationScore = profile.positive_ratings_received - profile.negative_ratings_received;
    const reputationEmoji = reputationScore > 0 ? '‚≠êÔ∏è' : reputationScore < 0 ? '‚ö†Ô∏è' : '‚ûñ';
    
    let message = `üë§ *–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å*\n\n`;
    message += `üè∑Ô∏è *–ù–∏–∫–Ω–µ–π–º:* ${profile.nickname}\n`;
    message += `üéÆ *Minecraft:* ${profile.minecraft_username || '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n`;
    message += `üìÖ *–î–∞—Ç–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è:* ${formatDate(profile.join_date)}\n`;
    message += `${reputationEmoji} *–†–µ–ø—É—Ç–∞—Ü–∏—è:* ${reputationScore}\n`;
    message += `üëç *–ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö –æ—Ü–µ–Ω–æ–∫:* ${profile.positive_ratings_received}\n`;
    message += `üëé *–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –æ—Ü–µ–Ω–æ–∫:* ${profile.negative_ratings_received}\n`;
    message += `üìä *–í—Å–µ–≥–æ –æ—Ü–µ–Ω–æ–∫ –ø–æ–ª—É—á–µ–Ω–æ:* ${profile.total_ratings_received}\n`;
    message += `‚úçÔ∏è *–û—Ü–µ–Ω–æ–∫ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ:* ${profile.total_ratings_given}\n`;
    
    if (profile.last_rating_given) {
      message += `üïê *–ü–æ—Å–ª–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞:* ${formatDate(profile.last_rating_given)}\n`;
    }
    
    if (ratingHistory && ratingHistory.length > 0) {
      message += `\nüìà *–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –æ—Ü–µ–Ω–∫–∏:*\n`;
      ratingHistory.slice(0, 5).forEach((rating, index) => {
        const emoji = rating.isPositive ? 'üëç' : 'üëé';
        const reason = rating.reason ? ` (${rating.reason})` : '';
        message += `${emoji} –æ—Ç @${rating.raterNickname}${reason}\n`;
      });
    }
    
    await ctx.reply(message, { parse_mode: 'Markdown' });
    
  } catch (error) {
    logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è:', error);
    await ctx.reply('üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
botController.hears("üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏", async (ctx) => {
  try {
    if (!ctx.from) return;
    
    const telegramId = ctx.from.id;
    logger.info(`üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫—Ä—ã–ª —Ä–∞–∑–¥–µ–ª "–£—á–∞—Å—Ç–Ω–∏–∫–∏":`, {
      userId: telegramId,
      username: ctx.from.username,
      chatId: ctx.chat?.id
    });
    
    const userRepository = new UserRepository();
    const user = await userRepository.findByTelegramId(telegramId);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (!user) {
      await UserUtils.handleAccessDenied(ctx, 'members_not_registered');
      return;
    }
    
    // –¢–æ–ª—å–∫–æ —á–ª–µ–Ω—ã –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –¥—Ä—É–≥–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    if (user.role !== UserRole.MEMBER && user.role !== UserRole.ADMIN) {
      await UserUtils.handleAccessDenied(ctx, 'members_role_check');
      return;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    const members = await userRepository.findAllMembers();
    
    logger.info(`üìã –ü–æ–ª—É—á–µ–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è: ${members ? members.length : 0}`);
    
    if (!members || members.length === 0) {
      logger.warn('‚ö†Ô∏è –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø—É—Å—Ç');
      await ctx.reply("üë• –í —Å–∏—Å—Ç–µ–º–µ –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å —Ä–æ–ª—å—é MEMBER –∏–ª–∏ ADMIN. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
      return;
    }
    
    // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    logger.info('üîß –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏');
    const keyboard = new InlineKeyboard();
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ 2 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ä—è–¥
    for (let i = 0; i < members.length; i += 2) {
      const firstMember = members[i];
      const secondMember = i + 1 < members.length ? members[i + 1] : null;
      
      if (firstMember) {
        const displayName = firstMember.username ? `@${firstMember.username}` : firstMember.minecraftNickname;
        const reputationIndicator = firstMember.reputation > 0 ? '‚≠êÔ∏è' : 
                                   firstMember.reputation < 0 ? '‚ö†Ô∏è' : '‚ûñ';
        
        logger.info(`‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É:`, {
          userId: firstMember.id,
          displayName,
          reputation: firstMember.reputation,
          callbackData: `select_member_${firstMember.id}`
        });
        
        keyboard.text(`${reputationIndicator} ${displayName}`, `select_member_${firstMember.id}`);
      }
      
      if (secondMember) {
        const displayName = secondMember.username ? `@${secondMember.username}` : secondMember.minecraftNickname;
        const reputationIndicator = secondMember.reputation > 0 ? '‚≠êÔ∏è' : 
                                   secondMember.reputation < 0 ? '‚ö†Ô∏è' : '‚ûñ';
        
        logger.info(`‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É:`, {
          userId: secondMember.id,
          displayName,
          reputation: secondMember.reputation,
          callbackData: `select_member_${secondMember.id}`
        });
        
        keyboard.text(`${reputationIndicator} ${displayName}`, `select_member_${secondMember.id}`);
      }
      
      keyboard.row();
    }
    
    logger.info('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é');
    
    await ctx.reply("üìä *–°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –æ—Ü–µ–Ω–∫–∏*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã –ø–æ—Å—Ç–∞–≤–∏—Ç—å –µ–º—É –æ—Ü–µ–Ω–∫—É:", {
      parse_mode: "Markdown",
      reply_markup: keyboard
    });
    
    logger.info('‚úÖ –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω');
    
  } catch (error) {
    logger.error("–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /members:", error);
    await ctx.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫
botController.hears("üó≥Ô∏è –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏", async (ctx) => {
  try {
    if (!ctx.from) return;
    
    const telegramId = ctx.from.id;
    const userRepository = new UserRepository();
    const user = await userRepository.findByTelegramId(telegramId);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (!user || (user.role !== UserRole.MEMBER && user.role !== UserRole.ADMIN)) {
      await UserUtils.handleAccessDenied(ctx, 'active_applications');
      return;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫
    const applicationRepository = new ApplicationRepository();
    const applications = await applicationRepository.findActiveApplications();
    
    if (applications.length === 0) {
      await ctx.reply('üìù –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç.');
      return;
    }
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–π –∑–∞—è–≤–∫–µ
    await ctx.reply('üìù *–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏:*', { parse_mode: 'Markdown' });
    
    for (const application of applications) {
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø–æ–¥–∞–≤—à–µ–≥–æ –∑–∞—è–≤–∫—É
      const applicant = await userRepository.findById(application.userId);
      
      // –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞—è–≤–∫–µ
      const keyboard = ButtonComponents.singleButton('üîç –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–µ—Ç–∞–ª–∏', `app_view_${application.id}`);
      
      // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞—è–≤–∫–µ
      const message = messageService.formatApplicationMessage(
        application,
        applicant.username
      );
      
      await ctx.reply(message, {
        reply_markup: keyboard,
        parse_mode: 'Markdown'
      });
    }
  } catch (error) {
    logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫:', error);
    await ctx.reply('üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–∞—è–≤–æ–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

export { botController };