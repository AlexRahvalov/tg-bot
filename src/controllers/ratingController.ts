import { Composer, InlineKeyboard } from 'grammy';
import type { MyContext } from '../index';
import { ratingService } from '../services/ratingService';
import { handleError, handleErrorWithContext } from '../utils/errorHandler';
import { UserRepository } from '../db/repositories/userRepository';
import { UserRole } from '../models/types';
import { logger } from '../utils/logger';
import { formatDate } from '../utils/stringUtils';
import { UserUtils } from '../utils/userUtils';
import { ButtonComponents } from '../components/buttons';

// –°–æ–∑–¥–∞–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const userRepository = new UserRepository();

// –°–æ–∑–¥–∞–µ–º –∫–æ–º–ø–æ–∑–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–µ–π—Ç–∏–Ω–≥–∞–º–∏
const ratingController = new Composer<MyContext>();

// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
const canVoteMiddleware = async (ctx: MyContext, next: () => Promise<void>) => {
  try {
    if (!ctx.from) {
      return await ctx.reply("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.");
    }
    
    const user = await userRepository.findByTelegramId(ctx.from.id);
    
    if (!user) {
      return await ctx.reply("‚ö†Ô∏è –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.");
    }
    
    if (!user.canVote) {
      return await ctx.reply("‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –∏–ª–∏ –æ—Ü–µ–Ω–∫–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.");
    }
    
    await next();
  } catch (error) {
    await handleErrorWithContext(ctx, error, "canVoteMiddleware");
  }
};

// –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –æ—Ü–µ–Ω–∫–∏
ratingController.command("members", async (ctx) => {
  try {
    logger.info('üë• –û—Ç–∫—Ä—ã—Ç–∏–µ —Ä–∞–∑–¥–µ–ª–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (ratingController):', {
      userId: ctx.from?.id,
      username: ctx.from?.username,
      chatId: ctx.chat?.id
    });
    
    const userId = ctx.from?.id;
    if (!userId) {
      await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
      return;
    }

    const user = await userRepository.findByTelegramId(userId);
    if (!user || !user.canVote) {
      await ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏—è –æ—Ü–µ–Ω–æ–∫');
      return;
    }

    const members = await userRepository.findAllMembers();
    logger.info(`üìã –ü–æ–ª—É—á–µ–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –æ—Ü–µ–Ω–∫–∏: ${members ? members.length : 0}`);
    
    if (members.length === 0) {
      logger.warn('‚ö†Ô∏è –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø—É—Å—Ç (ratingController)');
      await ctx.reply('‚ÑπÔ∏è –í —Å–æ–æ–±—â–µ—Å—Ç–≤–µ –ø–æ–∫–∞ –Ω–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤');
      return;
    }

    // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ü–µ–Ω–∫–∏
    logger.info('üîß –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ (ratingController)');
    const keyboard = new InlineKeyboard();
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ 2 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ä—è–¥
    for (let i = 0; i < members.length; i += 2) {
      const firstMember = members[i];
      const secondMember = i + 1 < members.length ? members[i + 1] : null;
      
      if (firstMember) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram, –µ—Å–ª–∏ –µ—Å—Ç—å, –∏–Ω–∞—á–µ –∏–º—è Minecraft
        const displayName = firstMember.username ? `@${firstMember.username}` : firstMember.minecraftNickname;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Ä–µ–ø—É—Ç–∞—Ü–∏–∏
        const reputationIndicator = firstMember.reputation > 0 ? '‚≠êÔ∏è' : 
                                   firstMember.reputation < 0 ? '‚ö†Ô∏è' : '‚ûñ';
        
        logger.info(`‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É (ratingController):`, {
          userId: firstMember.id,
          displayName,
          reputation: firstMember.reputation,
          callbackData: `select_member_${firstMember.id}`
        });
        
        keyboard.text(`${reputationIndicator} ${displayName}`, `select_member_${firstMember.id}`);
      }
      
      if (secondMember) {
        const displayName = secondMember.username ? `@${secondMember.username}` : secondMember.minecraftNickname;
        const reputationIndicator = secondMember.reputation > 0 ? '‚≠êÔ∏è' : 
                                   secondMember.reputation < 0 ? '‚ö†Ô∏è' : '‚ûñ';
        
        logger.info(`‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É (ratingController):`, {
          userId: secondMember.id,
          displayName,
          reputation: secondMember.reputation,
          callbackData: `select_member_${secondMember.id}`
        });
        
        keyboard.text(`${reputationIndicator} ${displayName}`, `select_member_${secondMember.id}`);
      }
      
      keyboard.row();
    }
    
    logger.info('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ (ratingController)');
    
    await ctx.reply("üìä *–°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –æ—Ü–µ–Ω–∫–∏*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã –ø–æ—Å—Ç–∞–≤–∏—Ç—å –µ–º—É –æ—Ü–µ–Ω–∫—É:", {
      parse_mode: "Markdown",
      reply_markup: keyboard
    });
    
    logger.info('‚úÖ –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω (ratingController)');
  } catch (error) {
    logger.error('–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ members:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤');
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏–∑ —Å–ø–∏—Å–∫–∞
ratingController.callbackQuery(/^select_member_(\d+)$/, async (ctx) => {
  try {
    logger.info(`üîç –í—ã–∑–æ–≤ select_member_ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞:`, {
      userId: ctx.from?.id,
      username: ctx.from?.username,
      callbackData: ctx.callbackQuery?.data,
      chatId: ctx.chat?.id,
      messageId: ctx.callbackQuery?.message?.message_id
    });
    
    await ctx.answerCallbackQuery();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    if (!ctx.from) {
      logger.warn('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ctx.from –≤ select_member_');
      await ctx.reply("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.");
      return;
    }
    
    const user = await userRepository.findByTelegramId(ctx.from.id);
    
    if (!user) {
      await ctx.reply("‚ö†Ô∏è –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.");
      return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –∏–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if (user.role !== UserRole.MEMBER && user.role !== UserRole.ADMIN) {
      await UserUtils.handleAccessDenied(
        ctx, 
        'ratingController.select_member_', 
        { telegramId: ctx.from.id, username: ctx.from?.username, role: user?.role }
      );
      return;
    }
    
    const targetUserId = parseInt(ctx.match[1] || '0');
    logger.info(`üîç –ò–∑–≤–ª–µ—á–µ–Ω targetUserId: ${targetUserId}`);
    
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID
    logger.info(`üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID: ${targetUserId}`);
    const targetUser = await userRepository.findById(targetUserId);
    
    if (!targetUser) {
      logger.warn(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID ${targetUserId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      await ctx.reply("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.");
      return;
    }
    
    logger.info(`‚úÖ –ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:`, {
      id: targetUser.id,
      username: targetUser.username,
      minecraftNickname: targetUser.minecraftNickname,
      role: targetUser.role
    });
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–π—Ç–∏–Ω–≥–µ
    logger.info(`üîç –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${targetUserId}`);
    const ratingsDetails = await ratingService.getUserRatingsDetails(targetUserId);
    logger.info(`‚úÖ –ü–æ–ª—É—á–µ–Ω —Ä–µ–π—Ç–∏–Ω–≥:`, ratingsDetails);
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const displayName = targetUser.username ? `@${targetUser.username}` : targetUser.minecraftNickname;
    logger.info(`üîç –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è: ${displayName}`);
    
    // –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    logger.info(`üîç –ù–∞—á–∏–Ω–∞–µ–º —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è`);
    let message = `üë§ *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:*\n\n`;
    
    if (targetUser.username) {
      message += `*Telegram:* @${targetUser.username.replace(/[_*\[\]()~`>#+=|{}.!-]/g, '\\$&')}\n`;
    }
    
    message += `*Minecraft:* ${targetUser.minecraftNickname.replace(/[_*\[\]()~`>#+=|{}.!-]/g, '\\$&')}\n`;
    message += `*–†–µ–ø—É—Ç–∞—Ü–∏—è:* ${targetUser.reputation} `;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Ä–µ–ø—É—Ç–∞—Ü–∏–∏
    if (targetUser.reputation > 0) {
      message += "üëç";
    } else if (targetUser.reputation < 0) {
      message += "üëé";
    }
    
    message += `\n*–ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö –æ—Ü–µ–Ω–æ–∫:* ${ratingsDetails.positiveCount}\n`;
    message += `*–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –æ—Ü–µ–Ω–æ–∫:* ${ratingsDetails.negativeCount}\n\n`;
    message += `*–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:*`;
    
    // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    const keyboard = ButtonComponents.rating(targetUser.id)
      .row()
      .text("üìä –ò—Å—Ç–æ—Ä–∏—è –æ—Ü–µ–Ω–æ–∫", `show_ratings_${targetUser.id}`)
      .row()
      .text("¬´ –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", "back_to_members");
    
    logger.info(`üîç –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:`, { messageLength: message.length, message: message.substring(0, 200) + '...' });
    logger.info(`üîç –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é`);
    
    try {
      await ctx.editMessageText(message, {
        parse_mode: "Markdown",
        reply_markup: keyboard
      });
    } catch (editError: any) {
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—à–∏–±–∫—É –æ –Ω–µ–∏–∑–º–µ–Ω–µ–Ω–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
      if (editError.description && editError.description.includes('message is not modified')) {
        logger.debug('–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ');
      } else {
        throw editError;
      }
    }
    
    logger.info(`‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ`);
    
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞:', {
      error: error,
      errorMessage: error instanceof Error ? error.message : 'Unknown error',
      errorStack: error instanceof Error ? error.stack : undefined,
      userId: ctx.from?.id,
      targetUserId: ctx.match?.[1]
    });
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞');
  }
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π –æ—Ü–µ–Ω–∫–∏
ratingController.command('rate_up', canVoteMiddleware, handleError(async (ctx) => {
  if (!ctx.from) {
    await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    return;
  }

  if (!ctx.message?.text) {
    await ctx.reply('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã');
    return;
  }

  const args = ctx.message.text?.split(' ');
  if (!args || args.length < 2) {
    await ctx.reply('‚ùå –£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: /rate_up <ID> [–ø—Ä–∏—á–∏–Ω–∞]');
    return;
  }

  const targetId = parseInt(args[1] ?? '0');
  if (isNaN(targetId)) {
    await ctx.reply('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    return;
  }

  const reason = args.length > 2 ? args.slice(2).join(' ') : undefined;
  const rater = await userRepository.findByTelegramId(ctx.from.id);
  if (!rater) {
    await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å');
    return;
  }

  const success = await ratingService.addRating(rater.id, targetId, true, reason);
  if (success) {
    const target = await userRepository.findById(targetId);
    if (!target) {
      await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }
    const displayName = target.nickname || target.minecraftNickname;
    let message = `‚úÖ –í—ã –ø–æ—Å—Ç–∞–≤–∏–ª–∏ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—É—é –æ—Ü–µ–Ω–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${displayName}`;
    if (reason) {
      message += `\n–ü—Ä–∏—á–∏–Ω–∞: ${reason}`;
    }
    await ctx.reply(message);
  } else {
    await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã—Å—Ç–∞–≤–∏—Ç—å –æ—Ü–µ–Ω–∫—É. –í–æ–∑–º–æ–∂–Ω–æ, –≤—ã —É–∂–µ –æ—Ü–µ–Ω–∏–≤–∞–ª–∏ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ–¥–∞–≤–Ω–æ.');
  }
}));

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π –æ—Ü–µ–Ω–∫–∏
ratingController.command('rate_down', canVoteMiddleware, handleError(async (ctx) => {
  if (!ctx.from) {
    await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    return;
  }

  if (!ctx.message?.text) {
    await ctx.reply('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã');
    return;
  }

  const args = ctx.message.text?.split(' ');
  if (!args || args.length < 2) {
    await ctx.reply('‚ùå –£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: /rate_down <ID> [–ø—Ä–∏—á–∏–Ω–∞]');
    return;
  }

  const targetId = parseInt(args[1] ?? '0');
  if (isNaN(targetId)) {
    await ctx.reply('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    return;
  }

  const reason = args.length > 2 ? args.slice(2).join(' ') : undefined;
  const rater = await userRepository.findByTelegramId(ctx.from.id);
  if (!rater) {
    await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å');
    return;
  }

  const success = await ratingService.addRating(rater.id, targetId, false, reason);
  if (success) {
    const target = await userRepository.findById(targetId);
    if (!target) {
      await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }
    const displayName = target.nickname || target.minecraftNickname;
    let message = `‚úÖ –í—ã –ø–æ—Å—Ç–∞–≤–∏–ª–∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—É—é –æ—Ü–µ–Ω–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${displayName}`;
    if (reason) {
      message += `\n–ü—Ä–∏—á–∏–Ω–∞: ${reason}`;
    }
    await ctx.reply(message);
  } else {
    await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã—Å—Ç–∞–≤–∏—Ç—å –æ—Ü–µ–Ω–∫—É. –í–æ–∑–º–æ–∂–Ω–æ, –≤—ã —É–∂–µ –æ—Ü–µ–Ω–∏–≤–∞–ª–∏ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ–¥–∞–≤–Ω–æ.');
  }
}));

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏ –æ—Ü–µ–Ω–æ–∫
ratingController.command('ratings', canVoteMiddleware, handleError(async (ctx) => {
  if (!ctx.from) {
    await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    return;
  }

  if (!ctx.message?.text) {
    await ctx.reply('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã');
    return;
  }

  const args = ctx.message.text?.split(' ');
  if (!args) {
    await ctx.reply('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã');
    return;
  }

  const targetId = args.length > 1 ? parseInt(args[1] ?? '0') : null;

  const user = await userRepository.findByTelegramId(ctx.from.id);
  if (!user) {
    await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å');
    return;
  }

  let target;
  if (targetId) {
    target = await userRepository.findById(targetId);
    if (!target) {
      await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }
  } else {
    target = user;
  }

  const displayName = target.nickname || target.minecraftNickname;
  const ratings = await ratingService.getRatingDetails(target.id);
  if (ratings.length === 0) {
    await ctx.reply(`‚ÑπÔ∏è –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${displayName} –ø–æ–∫–∞ –Ω–µ—Ç –æ—Ü–µ–Ω–æ–∫`);
    return;
  }

  let message = `üìä *–ò—Å—Ç–æ—Ä–∏—è –æ—Ü–µ–Ω–æ–∫ ${displayName}:*\n\n`;
  for (const rating of ratings) {
    const icon = rating.isPositive ? 'üëç' : 'üëé';
    const date = formatDate(rating.createdAt);
    message += `${icon} –æ—Ç ${rating.raterNickname} (${date})`;
    if (rating.reason) {
      message += `\n‚îî –ü—Ä–∏—á–∏–Ω–∞: ${rating.reason}`;
    }
    message += '\n\n';
  }

  await ctx.reply(message, { parse_mode: 'Markdown' });
}));

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ—Ñ–∏–ª—è –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
ratingController.command("viewprofile", async (ctx) => {
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    const members = await ratingService.getAllMembersWithRatings();
    
    if (members.length === 0) {
      await ctx.reply("üë• –ê–∫—Ç–∏–≤–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.");
      return;
    }
    
    // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const keyboard = new InlineKeyboard();
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ 2 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ä—è–¥
    for (let i = 0; i < members.length; i += 2) {
      const firstMember = members[i];
      const secondMember = i + 1 < members.length ? members[i + 1] : null;
      
      if (firstMember) {
        keyboard.text(firstMember.minecraftNickname, `view_profile_${firstMember.id}`);
      }
      
      if (secondMember) {
        keyboard.text(secondMember.minecraftNickname, `view_profile_${secondMember.id}`);
      }
      
      keyboard.row();
    }
    
    await ctx.reply("üë• –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ—Ñ–∏–ª—è:", { reply_markup: keyboard });
    
  } catch (error) {
    await handleErrorWithContext(ctx, error, "viewProfileCommand");
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ—Ñ–∏–ª—è
ratingController.callbackQuery(/^view_profile_(\d+)$/, async (ctx) => {
  try {
    await ctx.answerCallbackQuery();
    
    const targetUserId = parseInt(ctx.match[1] || '0');
    
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID
    const user = await userRepository.findById(targetUserId);
    
    if (!user) {
      await ctx.reply("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.");
      return;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–π—Ç–∏–Ω–≥–µ
    const ratingsDetails = await ratingService.getUserRatingsDetails(targetUserId);
    
    const roleName = {
      [UserRole.ADMIN]: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
      [UserRole.MEMBER]: '–£—á–∞—Å—Ç–Ω–∏–∫',
      [UserRole.APPLICANT]: '–ó–∞—è–≤–∏—Ç–µ–ª—å'
    }[user.role];
    
    let message = `üë§ *–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è*\n\n` +
                 `*–ù–∏–∫–Ω–µ–π–º:* ${user.minecraftNickname}\n` +
                 `*–†–æ–ª—å:* ${roleName}\n` +
                 `*–†–µ–ø—É—Ç–∞—Ü–∏—è:* ${user.reputation > 0 ? 'üëç ' : ''}${user.reputation < 0 ? 'üëé ' : ''}${user.reputation}\n` +
                 `*–ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö –æ—Ü–µ–Ω–æ–∫:* ${ratingsDetails.positiveCount}\n` +
                 `*–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –æ—Ü–µ–Ω–æ–∫:* ${ratingsDetails.negativeCount}\n` +
                 `*–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:* ${user.createdAt.toLocaleDateString()}\n`;
    
    // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞
    const keyboard = new InlineKeyboard()
      .text("üëç –†–µ—Å–ø–µ–∫—Ç", `rate_positive_${user.id}`)
      .text("üëé –ñ–∞–ª–æ–±–∞", `rate_negative_${user.id}`);
    
    await ctx.reply(message, { 
      parse_mode: "Markdown",
      reply_markup: keyboard
    });
    
  } catch (error) {
    await handleErrorWithContext(ctx, error, "viewProfileCallback");
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"
ratingController.callbackQuery("back_to_members", async (ctx) => {
  try {
    await ctx.answerCallbackQuery();
    
    logger.info('üîô –í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (ratingController):', {
      userId: ctx.from?.id,
      username: ctx.from?.username,
      chatId: ctx.chat?.id
    });
    
    const userId = ctx.from?.id;
    if (!userId) {
      await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
      return;
    }

    const user = await userRepository.findByTelegramId(userId);
    if (!user || !user.canVote) {
      await ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏—è –æ—Ü–µ–Ω–æ–∫');
      return;
    }

    const members = await userRepository.findAllMembers();
    logger.info(`üìã –ü–æ–ª—É—á–µ–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞: ${members ? members.length : 0}`);
    
    if (members.length === 0) {
      logger.warn('‚ö†Ô∏è –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø—É—Å—Ç –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ (ratingController)');
      await ctx.reply('‚ÑπÔ∏è –í —Å–æ–æ–±—â–µ—Å—Ç–≤–µ –ø–æ–∫–∞ –Ω–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤');
      return;
    }

    // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ü–µ–Ω–∫–∏
    const keyboard = new InlineKeyboard();
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ 2 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ä—è–¥
    for (let i = 0; i < members.length; i += 2) {
      const firstMember = members[i];
      const secondMember = i + 1 < members.length ? members[i + 1] : null;
      
      if (firstMember) {
        const displayName = firstMember.username ? `@${firstMember.username}` : firstMember.minecraftNickname;
        const reputationIndicator = firstMember.reputation > 0 ? '‚≠êÔ∏è' : 
                                   firstMember.reputation < 0 ? '‚ö†Ô∏è' : '‚ûñ';
        
        keyboard.text(`${reputationIndicator} ${displayName}`, `select_member_${firstMember.id}`);
      }
      
      if (secondMember) {
        const displayName = secondMember.username ? `@${secondMember.username}` : secondMember.minecraftNickname;
        const reputationIndicator = secondMember.reputation > 0 ? '‚≠êÔ∏è' : 
                                   secondMember.reputation < 0 ? '‚ö†Ô∏è' : '‚ûñ';
        
        keyboard.text(`${reputationIndicator} ${displayName}`, `select_member_${secondMember.id}`);
      }
      
      keyboard.row();
    }
    
    try {
      await ctx.editMessageText("üìä *–°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –æ—Ü–µ–Ω–∫–∏*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã –ø–æ—Å—Ç–∞–≤–∏—Ç—å –µ–º—É –æ—Ü–µ–Ω–∫—É:", {
        parse_mode: "Markdown",
        reply_markup: keyboard
      });
    } catch (editError: any) {
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—à–∏–±–∫—É –æ –Ω–µ–∏–∑–º–µ–Ω–µ–Ω–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
      if (editError.description && editError.description.includes('message is not modified')) {
        logger.debug('–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ');
      } else {
        throw editError;
      }
    }
  } catch (error) {
    logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ —Å–ø–∏—Å–∫—É —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ —Å–ø–∏—Å–∫—É —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤');
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞"
ratingController.callbackQuery(/^rate_positive_(\d+)$/, async (ctx) => {
  try {
    await ctx.answerCallbackQuery();
    
    if (!ctx.from) {
      await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
      return;
    }
    
    const targetUserId = parseInt(ctx.match[1] || '0');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
    const rater = await userRepository.findByTelegramId(ctx.from.id);
    if (!rater || !rater.canVote) {
      await ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤');
      return;
    }
    
    // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤–≤–æ–¥ –ø—Ä–∏—á–∏–Ω—ã –æ—Ü–µ–Ω–∫–∏
    ctx.session.targetUserId = targetUserId;
    
    const targetUser = await userRepository.findById(targetUserId);
    if (!targetUser) {
      await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }

    // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ—Ç–º–µ–Ω—ã
    const keyboard = new InlineKeyboard()
      .text("‚ùå –û—Ç–º–µ–Ω–∞", `cancel_rating_${targetUserId}`);
    
    await ctx.reply(`–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –ø–æ—Å—Ç–∞–≤–∏—Ç—å üëç –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—É—é –æ—Ü–µ–Ω–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${targetUser.username || targetUser.minecraftNickname}.\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ü–µ–Ω–∫–∏ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–û—Ç–º–µ–Ω–∞":`, {
      reply_markup: keyboard
    });
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —à–∞–≥ –≤ —Å–µ—Å—Å–∏–∏ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –ø—Ä–∏—á–∏–Ω—ã –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π –æ—Ü–µ–Ω–∫–∏
    if (ctx.session) {
      ctx.session.step = 'waiting_positive_rating_reason';
    }
    
  } catch (error) {
    logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π –æ—Ü–µ–Ω–∫–∏:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ –æ—Ü–µ–Ω–∫–∏');
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞"
ratingController.callbackQuery(/^rate_negative_(\d+)$/, async (ctx) => {
  try {
    await ctx.answerCallbackQuery();
    
    if (!ctx.from) {
      await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
      return;
    }
    
    const targetUserId = parseInt(ctx.match[1] || '0');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
    const rater = await userRepository.findByTelegramId(ctx.from.id);
    if (!rater || !rater.canVote) {
      await ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤');
      return;
    }
    
    // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤–≤–æ–¥ –ø—Ä–∏—á–∏–Ω—ã –æ—Ü–µ–Ω–∫–∏
    ctx.session.targetUserId = targetUserId;
    
    const targetUser = await userRepository.findById(targetUserId);
    if (!targetUser) {
      await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }

    // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ—Ç–º–µ–Ω—ã
    const keyboard = new InlineKeyboard()
      .text("‚ùå –û—Ç–º–µ–Ω–∞", `cancel_rating_${targetUserId}`);
    
    await ctx.reply(`‚ö†Ô∏è –í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –ø–æ—Å—Ç–∞–≤–∏—Ç—å üëé –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—É—é –æ—Ü–µ–Ω–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${targetUser.username || targetUser.minecraftNickname}.\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ü–µ–Ω–∫–∏ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ) –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–û—Ç–º–µ–Ω–∞":`, {
      reply_markup: keyboard
    });
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —à–∞–≥ –≤ —Å–µ—Å—Å–∏–∏ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –ø—Ä–∏—á–∏–Ω—ã –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π –æ—Ü–µ–Ω–∫–∏
    if (ctx.session) {
      ctx.session.step = 'waiting_negative_rating_reason';
    }
    
  } catch (error) {
    logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π –æ—Ü–µ–Ω–∫–∏:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ –æ—Ü–µ–Ω–∫–∏');
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ò—Å—Ç–æ—Ä–∏—è –æ—Ü–µ–Ω–æ–∫"
ratingController.callbackQuery(/^show_ratings_(\d+)$/, async (ctx) => {
  try {
    await ctx.answerCallbackQuery();
    
    const targetUserId = parseInt(ctx.match[1] || '0');
    
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID
    const targetUser = await userRepository.findById(targetUserId);
    if (!targetUser) {
      await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –æ—Ü–µ–Ω–æ–∫
    const ratings = await ratingService.getRatingDetails(targetUserId);
    
    if (ratings.length === 0) {
      // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
      const keyboard = new InlineKeyboard()
        .text("¬´ –ù–∞–∑–∞–¥", `select_member_${targetUserId}`);
      
      await ctx.reply(`‚ÑπÔ∏è –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${targetUser.username || targetUser.minecraftNickname} –ø–æ–∫–∞ –Ω–µ—Ç –æ—Ü–µ–Ω–æ–∫`, {
        reply_markup: keyboard
      });
      return;
    }
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏—Å—Ç–æ—Ä–∏–µ–π –æ—Ü–µ–Ω–æ–∫
    let message = `üìä *–ò—Å—Ç–æ—Ä–∏—è –æ—Ü–µ–Ω–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${targetUser.username ? `@${targetUser.username.replace(/_/g, '\\_')}` : targetUser.minecraftNickname}:*\n\n`;
    
    for (const rating of ratings.slice(0, 10)) { // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 10 –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ –æ—Ü–µ–Ω–∫–∞–º–∏
      const icon = rating.isPositive ? 'üëç' : 'üëé';
      const date = formatDate(rating.createdAt);
      message += `${icon} –æ—Ç ${rating.raterNickname} (${date})`;
      if (rating.reason) {
        message += `\n‚îî –ü—Ä–∏—á–∏–Ω–∞: ${rating.reason}`;
      }
      message += '\n\n';
    }
    
    if (ratings.length > 10) {
      message += `... –∏ –µ—â—ë ${ratings.length - 10} –æ—Ü–µ–Ω–æ–∫`;
    }
    
    // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
    const keyboard = ButtonComponents.back(`select_member_${targetUserId}`, "¬´ –ù–∞–∑–∞–¥");
    
    await ctx.reply(message, {
      parse_mode: "Markdown",
      reply_markup: keyboard
    });
    
  } catch (error) {
    logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –∏—Å—Ç–æ—Ä–∏–∏ –æ—Ü–µ–Ω–æ–∫:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –∏—Å—Ç–æ—Ä–∏–∏ –æ—Ü–µ–Ω–æ–∫');
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–û—Ç–º–µ–Ω–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞"
ratingController.callbackQuery(/^cancel_rating_(\d+)$/, async (ctx) => {
  try {
    await ctx.answerCallbackQuery();
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —à–∞–≥ –≤ —Å–µ—Å—Å–∏–∏
    if (ctx.session) {
      delete ctx.session.step;
      delete ctx.session.targetUserId;
    }
    
    const targetUserId = parseInt(ctx.match[1] || '0');
    
    await ctx.reply('‚ùå –í—ã—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ');
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    if (targetUserId) {
      // –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∑–∞–Ω–æ–≤–æ
      const keyboard = ButtonComponents.back(`select_member_${targetUserId}`, "¬´ –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø—Ä–æ—Ñ–∏–ª—é");
      
      await ctx.reply("–í—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", {
        reply_markup: keyboard
      });
    }
    
  } catch (error) {
    logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏—è –æ—Ü–µ–Ω–∫–∏:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏—è –æ—Ü–µ–Ω–∫–∏');
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ—Ü–µ–Ω–∫–∏
ratingController.on('message:text', async (ctx, next) => {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ—Ü–µ–Ω–∫–∏
    if (ctx.session?.step === 'waiting_positive_rating_reason' || 
        ctx.session?.step === 'waiting_negative_rating_reason') {
      
      const isPositive = ctx.session.step === 'waiting_positive_rating_reason';
      const targetUserId = ctx.session.targetUserId;
      const reason = ctx.message.text;
      
      if (!targetUserId) {
        await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: –Ω–µ —É–∫–∞–∑–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è –æ—Ü–µ–Ω–∫–∏');
        delete ctx.session.step;
        delete ctx.session.targetUserId;
        return;
      }
      
      // –ï—Å–ª–∏ —ç—Ç–æ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø—Ä–∏—á–∏–Ω—ã
      if (!isPositive && (!reason || reason.trim().length < 3)) {
        await ctx.reply('‚ö†Ô∏è –î–ª—è –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π –æ—Ü–µ–Ω–∫–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –ø—Ä–∏—á–∏–Ω—É (–º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞)');
        return;
      }
      
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
      if (!ctx.from) {
        await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—Å –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
        return;
      }
      
      const rater = await userRepository.findByTelegramId(ctx.from.id);
      if (!rater) {
        await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å');
        delete ctx.session.step;
        delete ctx.session.targetUserId;
        return;
      }
      
      const target = await userRepository.findById(targetUserId);
      if (!target) {
        await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω');
        delete ctx.session.step;
        delete ctx.session.targetUserId;
        return;
      }
      
      // –í—ã—Å—Ç–∞–≤–ª—è–µ–º –æ—Ü–µ–Ω–∫—É
      const success = await ratingService.addRating(rater.id, targetUserId, isPositive, reason);
      
      // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Å—Å–∏–∏
      delete ctx.session.step;
      delete ctx.session.targetUserId;
      
      if (success) {
        const displayName = target.username ? `@${target.username}` : target.minecraftNickname;
        const ratingType = isPositive ? 'üëç –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—É—é' : 'üëé –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—É—é';
        
        // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –ø—Ä–æ—Ñ–∏–ª—é
        const keyboard = new InlineKeyboard()
          .text("¬´ –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø—Ä–æ—Ñ–∏–ª—é", `select_member_${targetUserId}`);
        
        let message = `‚úÖ –í—ã –ø–æ—Å—Ç–∞–≤–∏–ª–∏ ${ratingType} –æ—Ü–µ–Ω–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${displayName}`;
        if (reason) {
          message += `\n–ü—Ä–∏—á–∏–Ω–∞: ${reason}`;
        }
        
        await ctx.reply(message, {
          reply_markup: keyboard
        });
      } else {
        await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã—Å—Ç–∞–≤–∏—Ç—å –æ—Ü–µ–Ω–∫—É. –í–æ–∑–º–æ–∂–Ω–æ, –≤—ã —É–∂–µ –æ—Ü–µ–Ω–∏–≤–∞–ª–∏ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ–¥–∞–≤–Ω–æ.');
      }
      
      return;
    }
    
    // –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ü–µ–Ω–∫–∏, –ø–µ—Ä–µ–¥–∞–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–º—É –æ–±—Ä–∞–±–æ—Ç—á–∏–∫—É
    await next();
  } catch (error) {
    logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–∏—á–∏–Ω—ã –æ—Ü–µ–Ω–∫–∏:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ü–µ–Ω–∫–∏');
    
    // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    if (ctx.session) {
      delete ctx.session.step;
      delete ctx.session.targetUserId;
    }
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
ratingController.callbackQuery("return_to_members", async (ctx) => {
  try {
    await ctx.answerCallbackQuery();
    
    if (!ctx.from) {
      logger.warn('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ctx.from –≤ return_to_members');
      await ctx.reply("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
      return;
    }
    
    logger.info(`üîÑ –í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:`, {
      userId: ctx.from.id,
      username: ctx.from.username,
      firstName: ctx.from.first_name
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await userRepository.findByTelegramId(ctx.from.id);
    
    if (!user) {
      await ctx.reply("‚ö†Ô∏è –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /apply –¥–ª—è –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏.");
      return;
    }
    
    // –¢–æ–ª—å–∫–æ —á–ª–µ–Ω—ã –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –æ—Ü–µ–Ω–∏–≤–∞—Ç—å –¥—Ä—É–≥–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    if (user.role !== UserRole.MEMBER && user.role !== UserRole.ADMIN) {
      await ctx.reply("‚ö†Ô∏è –¢–æ–ª—å–∫–æ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∏ –æ—Ü–µ–Ω–∏–≤–∞—Ç—å –¥—Ä—É–≥–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.");
      return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
    if (!user.canVote) {
      await ctx.reply("‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏—è –æ—Ü–µ–Ω–æ–∫.");
      return;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    const members = await userRepository.findAllMembers();
    
    logger.info(`üìã –ü–æ–ª—É—á–µ–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è: ${members ? members.length : 0}`);
    
    if (!members || members.length === 0) {
      logger.warn('‚ö†Ô∏è –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø—É—Å—Ç');
      await ctx.reply("üë• –í —Å–∏—Å—Ç–µ–º–µ –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å —Ä–æ–ª—å—é MEMBER –∏–ª–∏ ADMIN. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
      return;
    }
    
    // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    logger.info('üîß –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏');
    const keyboard = new InlineKeyboard();
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ 2 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ä—è–¥
    for (let i = 0; i < members.length; i += 2) {
      const firstMember = members[i];
      const secondMember = i + 1 < members.length ? members[i + 1] : null;
      
      if (firstMember) {
        const displayName = firstMember.username ? `@${firstMember.username}` : firstMember.minecraftNickname;
        const reputationIndicator = firstMember.reputation > 0 ? '‚≠êÔ∏è' : 
                                   firstMember.reputation < 0 ? '‚ö†Ô∏è' : '‚ûñ';
        
        logger.info(`‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É:`, {
          userId: firstMember.id,
          displayName,
          reputation: firstMember.reputation,
          callbackData: `select_member_${firstMember.id}`
        });
        
        keyboard.text(`${reputationIndicator} ${displayName}`, `select_member_${firstMember.id}`);
      }
      
      if (secondMember) {
        const displayName = secondMember.username ? `@${secondMember.username}` : secondMember.minecraftNickname;
        const reputationIndicator = secondMember.reputation > 0 ? '‚≠êÔ∏è' : 
                                   secondMember.reputation < 0 ? '‚ö†Ô∏è' : '‚ûñ';
        
        logger.info(`‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É:`, {
          userId: secondMember.id,
          displayName,
          reputation: secondMember.reputation,
          callbackData: `select_member_${secondMember.id}`
        });
        
        keyboard.text(`${reputationIndicator} ${displayName}`, `select_member_${secondMember.id}`);
      }
      
      keyboard.row();
    }
    
    logger.info('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é');
    
    try {
      await ctx.editMessageText("üìä *–°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –æ—Ü–µ–Ω–∫–∏*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã –ø–æ—Å—Ç–∞–≤–∏—Ç—å –µ–º—É –æ—Ü–µ–Ω–∫—É:", {
        parse_mode: "Markdown",
        reply_markup: keyboard
      });
    } catch (editError: any) {
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—à–∏–±–∫—É –æ –Ω–µ–∏–∑–º–µ–Ω–µ–Ω–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
      if (editError.description && editError.description.includes('message is not modified')) {
        logger.debug('–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ');
      } else {
        throw editError;
      }
    }
    
    logger.info('‚úÖ –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω');
    
  } catch (error) {
    logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ —Å–ø–∏—Å–∫—É —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.');
  }
});

export { ratingController };