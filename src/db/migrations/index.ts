import { readFile, readdir } from 'fs/promises';
import { join } from 'path';
import { executeQuery } from '../connection';

/**
 * –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
 */
export const runMigrations = async (): Promise<void> => {
  try {
    console.log('üìä –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –º–∏–≥—Ä–∞—Ü–∏–π
    const migrationFiles = await readdir(__dirname);
    
    // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ SQL —Ñ–∞–π–ª—ã –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –∏—Ö –ø–æ –∏–º–µ–Ω–∏
    const sqlFiles = migrationFiles
      .filter(file => file.endsWith('.sql'))
      .sort();
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª –º–∏–≥—Ä–∞—Ü–∏–∏ –ø–æ –æ—á–µ—Ä–µ–¥–∏
    for (const sqlFile of sqlFiles) {
      console.log(`‚è≥ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏: ${sqlFile}`);
      
      // –ß—Ç–µ–Ω–∏–µ SQL-—Å–∫—Ä–∏–ø—Ç–∞
      const sqlPath = join(__dirname, sqlFile);
      const sql = await readFile(sqlPath, 'utf8');
      
      try {
        // –í—ã–ø–æ–ª–Ω—è–µ–º –≤–µ—Å—å —Å–∫—Ä–∏–ø—Ç —Ü–µ–ª–∏–∫–æ–º
        await executeQuery(sql);
        console.log(`‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è ${sqlFile} —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞`);
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ ${sqlFile}:`, error);
        
        // –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–µ–º –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—ã –ø–æ –æ—Ç–¥–µ–ª—å–Ω–æ—Å—Ç–∏
        console.log(`‚è≥ –ü—Ä–æ–±—É–µ–º –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—ã –∏–∑ ${sqlFile} –ø–æ –æ—Ç–¥–µ–ª—å–Ω–æ—Å—Ç–∏...`);
        
        // –†–∞–∑–¥–µ–ª—è–µ–º SQL –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        const sqlCommands = sql
          .split(';')
          .map(command => command.trim())
          .filter(command => command.length > 0);
        
        for (const sqlCommand of sqlCommands) {
          try {
            await executeQuery(sqlCommand);
          } catch (cmdError) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –≤ SQL –∫–æ–º–∞–Ω–¥–µ: ${sqlCommand}`, cmdError);
            throw cmdError;
          }
        }
      }
    }
    
    console.log('‚úÖ –ú–∏–≥—Ä–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –º–∏–≥—Ä–∞—Ü–∏–π:', error);
    throw error;
  }
}; 