import { Bot, Context, session, GrammyError, HttpError, InlineKeyboard } from 'grammy';
import type { SessionFlavor } from 'grammy';
import config from './config/env';
import { initializeDatabase, closeDatabase, executeQuery } from './db/connection';
import { stopCacheCleanup } from './utils/cache';
import { runMigrations } from './db/migrations';
import { applicationController, setBotInstance } from './controllers/applicationController';
import { botController } from './controllers/botController';
import { adminController } from './controllers/adminController';
import { VotingService } from './services/votingService';
import { logger } from './utils/logger';
import { UserRepository } from './db/repositories/userRepository';
import { UserRole, ApplicationStatus, WhitelistStatus } from './models/types';
import { RoleManager } from './components/roles';
import { ratingService } from './services/ratingService';
import { MinecraftService } from './services/minecraftService';
import { ProfileService } from './services/profileService';
import { formatDate } from './utils/stringUtils';
import { ApplicationRepository } from './db/repositories/applicationRepository';
import { profileController } from './controllers/profileController';
import { ratingController } from './controllers/ratingController';

// –ï–Ω–∞–º –¥–ª—è —Ç–∏–ø–∞ –æ—Ü–µ–Ω–∫–∏
export enum RatingType {
  POSITIVE = 'positive',
  NEGATIVE = 'negative'
}

// –†–∞—Å—à–∏—Ä—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å SessionData –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ—Ü–µ–Ω–∫–∏
interface SessionData {
  applyState?: {
    step: string;
    minecraftNickname?: string;
    discordUsername?: string;
  };
  ratingState?: {
    targetUserId: number;
    ratingType: RatingType;
    step: string;
  };
  applicationId?: number;
  questionId?: number;
  targetUserId?: number;
  votingSettings?: {
    days: number;
    hours: number;
    minutes: number;
  };
  minVotesRequired?: number;
  negativeThreshold?: number;
  askQuestionAppId?: number;
  // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—è –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ—Ü–µ–Ω–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  step?: string;
  // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º—ã –∑–∞—è–≤–∫–∏
  form?: {
    minecraftNickname?: string;
    reason?: string;
    [key: string]: any;
  };
}

// –†–∞—Å—à–∏—Ä—è–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏
export type MyContext = Context & SessionFlavor<SessionData>;

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
const bot = new Bot<MyContext>(config.botToken);

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
const votingService = new VotingService(bot);

// –ü–µ—Ä–µ–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –≤ —Å–µ—Ä–≤–∏—Å —Ä–µ–π—Ç–∏–Ω–≥–æ–≤
ratingService.setBotInstance(bot);

// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –≤ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –∑–∞—è–≤–æ–∫
setBotInstance(bot);

// =====================================================
// –í–ê–ñ–ù–û: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –ù–ê–ü–†–Ø–ú–£–Æ –∫ –±–æ—Ç—É
// =====================================================
bot.command("profile", async (ctx) => {
  try {
    if (!ctx.from) {
      await ctx.reply("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
      return;
    }
    
    const telegramId = ctx.from.id;
    logger.info(`–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /profile –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${telegramId}`);
    
    // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userRepository = new UserRepository();
    const user = await userRepository.findByTelegramId(telegramId);
    
    if (!user) {
      await ctx.reply("‚ö†Ô∏è –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /apply –¥–ª—è –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏.");
      return;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ä–µ–π—Ç–∏–Ω–≥–µ
    const ratingsDetails = await ratingService.getUserRatingsDetails(user.id);
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞—è–≤–∫–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const applicationRepository = new ApplicationRepository();
    const applications = await applicationRepository.findAllApplicationsByUserId(user.id);
    let applicationStatus = '';
    
    if (applications && applications.length > 0) {
      // –ë–µ—Ä–µ–º —Å–∞–º—É—é –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞—è–≤–∫—É
      const latestApp = applications[0];
      // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞—Ç—É—Å–µ –∑–∞—è–≤–∫–∏ (–µ—Å–ª–∏ –æ–Ω–∞ –≤ –∞–∫—Ç–∏–≤–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏)
      if (latestApp && latestApp.status === ApplicationStatus.PENDING) {
        applicationStatus = '\nüìù *–£ –≤–∞—Å –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏*';
      } else if (latestApp && latestApp.status === ApplicationStatus.VOTING) {
        applicationStatus = '\nüó≥Ô∏è *–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è*';
      } else if (latestApp && latestApp.status === ApplicationStatus.REJECTED) {
        applicationStatus = '\n‚ùå *–í–∞—à–∞ –ø–æ—Å–ª–µ–¥–Ω—è—è –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞*';
      }
    }
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–ø—É—Ç–∞—Ü–∏—é
    const reputationScore = user.reputation;
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
    const createdAtDate = new Date(user.createdAt);
    const joinDate = formatDate(createdAtDate);
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ—Ñ–∏–ª–µ–º
    let message = `üìä *–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:*\n\n`;
    
    // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    message += `üë§ Telegram: @${user.username ? user.username.replace(/_/g, '\\_') : `user_${telegramId}`}\n`;
    message += `üéÆ Minecraft: ${user.minecraftNickname.replace(/_/g, '\\_')}\n`;
    message += `üìÖ –î–∞—Ç–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è: ${joinDate}`;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞—è–≤–∫–µ, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
    if (applicationStatus) {
      message += applicationStatus;
    }
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞
    message += `\n\n*–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞:*\n`;
    message += `‚≠êÔ∏è –†–µ–ø—É—Ç–∞—Ü–∏—è: ${reputationScore}\n`;
    message += `üëç –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –æ—Ü–µ–Ω–∫–∏: ${ratingsDetails.positiveCount}\n`;
    message += `üëé –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –æ—Ü–µ–Ω–∫–∏: ${ratingsDetails.negativeCount}\n`;
    message += `üìä –í—Å–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–æ –æ—Ü–µ–Ω–æ–∫: ${ratingsDetails.positiveCount + ratingsDetails.negativeCount}\n`;
    message += `‚úçÔ∏è –í—ã–¥–∞–Ω–æ –æ—Ü–µ–Ω–æ–∫: ${user.totalRatingsGiven || 0}\n`;
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await ctx.reply(message, { parse_mode: "Markdown" });
    
  } catch (error) {
    logger.error("üî¥ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /profile:", error);
    try {
      await ctx.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
    } catch (replyError) {
      logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ:", replyError);
    }
  }
});

bot.command("viewprofile", async (ctx) => {
  try {
    if (!ctx.from) {
      await ctx.reply("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
      return;
    }
    
    logger.info(`–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /viewprofile –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.from.id}`);
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
    const userRepository = new UserRepository();
    const members = await userRepository.findAllMembers();
    
    if (!members || members.length === 0) {
      await ctx.reply("üë• –ê–∫—Ç–∏–≤–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.");
      return;
    }
    
    // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const keyboard = new InlineKeyboard();
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ 2 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ä—è–¥
    for (let i = 0; i < members.length; i += 2) {
      const firstMember = members[i];
      const secondMember = i + 1 < members.length ? members[i + 1] : null;
      
      if (firstMember) {
        keyboard.text(firstMember.minecraftNickname, `view_profile_${firstMember.id}`);
      }
      
      if (secondMember) {
        keyboard.text(secondMember.minecraftNickname, `view_profile_${secondMember.id}`);
      }
      
      keyboard.row();
    }
    
    await ctx.reply("üë• –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ—Ñ–∏–ª—è:", { reply_markup: keyboard });
    
  } catch (error) {
    logger.error("–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /viewprofile:", error);
    await ctx.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.");
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /members –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω –≤ ratingController

// =====================================================
// –ö–æ–Ω–µ—Ü –ø—Ä—è–º–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
// =====================================================

// –î–æ–±–∞–≤–ª—è–µ–º middleware –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–µ—Å—Å–∏—è–º–∏
bot.use(session({
  initial: (): SessionData => ({})
}));

// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞
// –í–ê–ñ–ù–û: ratingController –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ü–ï–†–ï–î adminController,
// —á—Ç–æ–±—ã select_member_ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–ª—Å—è –±–µ–∑ adminMiddleware
bot.use(botController);
bot.use(applicationController);
bot.use(profileController);
bot.use(ratingController);
bot.use(adminController);

// –¢–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤—Å–µ—Ö –ø—Ä—è–º—ã—Ö –∫–æ–º–∞–Ω–¥ –¥–æ–±–∞–≤–ª—è–µ–º 
// –ø–µ—Ä–µ—Ö–≤–∞—Ç—á–∏–∫ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ (—á—Ç–æ–±—ã –æ–Ω –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥)
bot.use(async (ctx, next) => {
  let updateType = 'unknown';
  if (ctx.message) updateType = 'message';
  else if (ctx.callbackQuery) updateType = 'callback_query';
  else if (ctx.inlineQuery) updateType = 'inline_query';
  
  const message = ctx.message?.text;
  logger.info(`üîç –ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∏–ø–∞: ${updateType}, —Ç–µ–∫—Å—Ç: ${message || '–Ω–µ—Ç'}`);
  
  await next();
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ª–±—ç–∫–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ—Ñ–∏–ª—è
bot.callbackQuery(/^view_profile_(\d+)$/, async (ctx) => {
  try {
    await ctx.answerCallbackQuery();
    
    const targetUserId = parseInt(ctx.match[1] || '0');
    
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID
    const userRepository = new UserRepository();
    const user = await userRepository.findById(targetUserId);
    
    if (!user) {
      await ctx.reply("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.");
      return;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–π—Ç–∏–Ω–≥–µ
    const ratingsDetails = await ratingService.getUserRatingsDetails(targetUserId);
    
    const roleName = {
      [RoleManager.ROLES.ADMIN]: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
      [RoleManager.ROLES.MEMBER]: '–£—á–∞—Å—Ç–Ω–∏–∫',
      [RoleManager.ROLES.APPLICANT]: '–ó–∞—è–≤–∏—Ç–µ–ª—å',
      [RoleManager.ROLES.VISITOR]: '–ü–æ—Å–µ—Ç–∏—Ç–µ–ª—å'
    }[user.role];
    
    let message = `üë§ *–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è*\n\n` +
                 `*–ù–∏–∫–Ω–µ–π–º:* ${user.minecraftNickname}\n` +
                 `*–†–æ–ª—å:* ${roleName}\n` +
                 `*–†–µ–ø—É—Ç–∞—Ü–∏—è:* ${user.reputation > 0 ? 'üëç ' : ''}${user.reputation < 0 ? 'üëé ' : ''}${user.reputation}\n` +
                 `*–ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö –æ—Ü–µ–Ω–æ–∫:* ${ratingsDetails.positiveCount}\n` +
                 `*–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –æ—Ü–µ–Ω–æ–∫:* ${ratingsDetails.negativeCount}\n` +
                 `*–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:* ${user.createdAt.toLocaleDateString()}\n`;
    
    // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞
    const keyboard = new InlineKeyboard()
      .text("üëç –†–µ—Å–ø–µ–∫—Ç", `rate_positive_${user.id}`)
      .text("üëé –ñ–∞–ª–æ–±–∞", `rate_negative_${user.id}`);
    
    await ctx.reply(message, { 
      parse_mode: "Markdown",
      reply_markup: keyboard
    });
    
  } catch (error) {
    logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –ø—Ä–æ—Ñ–∏–ª—è:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –ø—Ä–æ—Ñ–∏–ª—è');
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ü–µ–Ω–æ–∫ —É–¥–∞–ª–µ–Ω - —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è ratingController

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –æ—Ü–µ–Ω–∫–∏ —É–¥–∞–ª–µ–Ω - —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è ratingController

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ return_to_members –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω –≤ ratingController

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ—Ü–µ–Ω–∫–∏
// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —É–¥–∞–ª–µ–Ω - —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è ratingController

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞ —É–¥–∞–ª–µ–Ω - —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è ratingController

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–∫–∞–∑–∞ –∏—Å—Ç–æ—Ä–∏–∏ –æ—Ü–µ–Ω–æ–∫
bot.callbackQuery(/^show_ratings_(\d+)$/, async (ctx) => {
  try {
    await ctx.answerCallbackQuery();
    
    const targetUserId = parseInt(ctx.match[1] || '0');
    
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID
    const userRepository = new UserRepository();
    const targetUser = await userRepository.findById(targetUserId);
    
    if (!targetUser) {
      await ctx.reply("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.");
      return;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ä–µ–π—Ç–∏–Ω–≥–µ
    const ratingsDetails = await ratingService.getUserRatingsDetails(targetUserId);
    
    // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –ø—Ä–æ—Ñ–∏–ª—é
    const keyboard = new InlineKeyboard()
      .text("¬´ –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ—Ñ–∏–ª—é", `select_member_${targetUserId}`)
      .row()
      .text("¬´ –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", "return_to_members");
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ä–µ–π—Ç–∏–Ω–≥–µ
    let message = `üìä *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–π—Ç–∏–Ω–≥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${targetUser.minecraftNickname}:*\n\n`;
    message += `üëç –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö –æ—Ü–µ–Ω–æ–∫: ${ratingsDetails.positiveCount}\n`;
    message += `üëé –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –æ—Ü–µ–Ω–æ–∫: ${ratingsDetails.negativeCount}\n`;
    message += `‚≠êÔ∏è –†–µ–ø—É—Ç–∞—Ü–∏—è: ${targetUser.reputation}\n\n`;
    
    // –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ—Ü–µ–Ω–∫–∏
    message += `–ß—Ç–æ–±—ã –æ—Ü–µ–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –∫ –µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—é –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞" –∏–ª–∏ "–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞".`;
    
    await ctx.reply(message, {
      parse_mode: "Markdown",
      reply_markup: keyboard
    });
    
  } catch (error) {
    logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–µ–π—Ç–∏–Ω–≥–µ:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–µ–π—Ç–∏–Ω–≥–µ');
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
bot.catch((err) => {
  const ctx = err.ctx;
  logger.error(`Error while handling update ${ctx.update.update_id}:`);
  const e = err.error;
  if (e instanceof GrammyError) {
    logger.error("Error in request:", e.description);
  } else if (e instanceof HttpError) {
    logger.error("Could not contact Telegram:", e);
  } else {
    logger.error("Unknown error:", e);
  }
});

// –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
// –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å—Ç–µ–∫—à–∏—Ö –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π
let expiredVotingsInterval: NodeJS.Timeout | null = null;

async function startBot() {
  try {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await initializeDatabase();
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏
    await runMigrations();
    
    // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∞–∫–∫–∞—É–Ω—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    await ensureAdminAccount();
    
    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º whitelist —Å –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
    await syncWhitelistOnStartup();
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
    await bot.api.setMyCommands([
      { command: "start", description: "–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º" },
      { command: "help", description: "–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥" },
      { command: "apply", description: "–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ" },
      { command: "status", description: "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏" },
      { command: "profile", description: "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å" },
      { command: "viewprofile", description: "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª–∏ –¥—Ä—É–≥–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤" },
      { command: "members", description: "–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤" },
    ]);
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –∏—Å—Ç–µ–∫—à–∏—Ö –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π
    startExpiredVotingsCheck();
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    await bot.start({
      onStart: (botInfo) => {
        logger.info(`‚úÖ –ë–æ—Ç ${botInfo.username} —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω`);
      },
    });
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞:', error);
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –æ—à–∏–±–∫–µ
    await closeDatabase();
    process.exit(1);
  }
}

/**
 * –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å—Ç–µ–∫—à–∏—Ö –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π
 */
function startExpiredVotingsCheck(): void {
  if (expiredVotingsInterval) {
    return; // –£–∂–µ –∑–∞–ø—É—â–µ–Ω
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–µ–∫—à–∏–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
  expiredVotingsInterval = setInterval(async () => {
    try {
      const processedCount = await votingService.checkExpiredVotings();
      if (processedCount > 0) {
        logger.info(`‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${processedCount} –∏—Å—Ç–µ–∫—à–∏—Ö –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π`);
      }
    } catch (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∏—Å—Ç–µ–∫—à–∏—Ö –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π:', error);
    }
  }, 5 * 60 * 1000); // 5 –º–∏–Ω—É—Ç
  
  logger.info('‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π –∑–∞–ø—É—â–µ–Ω–∞');
}

/**
 * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å—Ç–µ–∫—à–∏—Ö –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π
 */
function stopExpiredVotingsCheck(): void {
  if (expiredVotingsInterval) {
    clearInterval(expiredVotingsInterval);
    expiredVotingsInterval = null;
    logger.info('üõë –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
startBot();

// –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è whitelist —Å –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
async function syncWhitelistOnStartup() {
  try {
    logger.info('üîÑ –ù–∞—á–∏–Ω–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é whitelist...');
    
    const userRepository = new UserRepository();
    const minecraftService = new MinecraftService();
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    logger.info('üîç –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º not_added...');
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'not_added'
    const usersToAdd = await userRepository.findUsersNotInWhitelist();
    
    logger.info(`üîç –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞: –Ω–∞–π–¥–µ–Ω–æ ${usersToAdd.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
    if (usersToAdd.length > 0) {
      logger.info('üë• –ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:', usersToAdd.map(u => ({ id: u.id, username: u.username, role: u.role, minecraftNickname: u.minecraftNickname, minecraftUUID: u.minecraftUUID })));
    }
    
    if (usersToAdd.length === 0) {
      logger.info('‚ÑπÔ∏è –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º not_added –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ whitelist');
      return;
    }
    
    logger.info(`üìã –ù–∞–π–¥–µ–Ω–æ ${usersToAdd.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º not_added –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏`);
    
    let successCount = 0;
    let failureCount = 0;
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ whitelist —Å —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    const whitelistedPlayers = await minecraftService.getWhitelistedPlayers();
    
    for (const user of usersToAdd) {
      try {
        if (user.minecraftUUID) {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ whitelist
          const isInWhitelist = whitelistedPlayers && whitelistedPlayers.some(player => 
            player.toLowerCase() === user.minecraftNickname.toLowerCase()
          );
          
          if (isInWhitelist) {
            // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ whitelist, –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
             logger.info(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.minecraftNickname} —É–∂–µ –≤ whitelist, –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å`);
             await userRepository.updateWhitelistStatus(user.id, WhitelistStatus.ADDED);
            successCount++;
          } else {
            // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ whitelist, –¥–æ–±–∞–≤–ª—è–µ–º
            const result = await minecraftService.addToWhitelist(user.minecraftNickname, user.minecraftUUID, user.id);
            if (result) {
              successCount++;
              logger.info(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.minecraftNickname} –¥–æ–±–∞–≤–ª–µ–Ω –≤ whitelist`);
            } else {
              failureCount++;
              logger.warn(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å ${user.minecraftNickname} –≤ whitelist`);
            }
          }
        } else {
          logger.warn(`‚ö†Ô∏è –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.minecraftNickname} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç UUID`);
          failureCount++;
        }
        
        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        await new Promise(resolve => setTimeout(resolve, 500));
      } catch (error) {
        failureCount++;
        logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ ${user.minecraftNickname} –≤ whitelist:`, error);
      }
    }
    
    logger.info(`üèÅ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${successCount} —É—Å–ø–µ—à–Ω–æ, ${failureCount} —Å –æ—à–∏–±–∫–∞–º–∏`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º not_added
    logger.info('üîÑ –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º not_added...');
    await minecraftService.retryFailedWhitelistAdditions();
    
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ whitelist:', error);
  }
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
async function ensureAdminAccount() {
  try {
    const adminTelegramId = parseInt(config.adminTelegramId);
    
    if (!adminTelegramId || isNaN(adminTelegramId)) {
      logger.warn('‚ö†Ô∏è ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–µ —É–∫–∞–∑–∞–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–ª–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω');
      return;
    }
    
    const userRepository = new UserRepository();
    let adminUser = await userRepository.findByTelegramId(adminTelegramId);
    
    if (!adminUser) {
      // –°–æ–∑–¥–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –µ—Å–ª–∏ –æ–Ω –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      adminUser = await userRepository.create({
        telegramId: adminTelegramId,
        username: 'admin',
        minecraftNickname: 'admin',
        role: RoleManager.ROLES.ADMIN,
        canVote: true
      });
      logger.info(`‚úÖ –°–æ–∑–¥–∞–Ω –∞–∫–∫–∞—É–Ω—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (Telegram ID: ${adminTelegramId})`);
    } else if (!RoleManager.isAdmin(adminUser)) {
      // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∞–≤–∞, –µ—Å–ª–∏ –∞–∫–∫–∞—É–Ω—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–æ –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
      adminUser = await userRepository.update(adminUser.id, {
        role: RoleManager.ROLES.ADMIN,
        canVote: true
      });
      logger.info(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω—ã –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (Telegram ID: ${adminTelegramId})`);
    }
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:', error);
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
process.once('SIGINT', async () => {
  logger.info('üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGINT, –∑–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ...');
  stopCacheCleanup();
  stopExpiredVotingsCheck();
  await closeDatabase();
  process.exit(0);
});

process.once('SIGTERM', async () => {
  logger.info('üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGTERM, –∑–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ...');
  stopCacheCleanup();
  stopExpiredVotingsCheck();
  await closeDatabase();
  process.exit(0);
});