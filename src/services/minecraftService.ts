import { createHash } from 'crypto';
import { logger } from '../utils/logger';
import { status, RCON } from 'minecraft-server-util';
import config from '../config/env';
import { UserRepository } from '../db/repositories/userRepository.js';
import { WhitelistStatus } from '../models/types.js';

interface MojangApiResponse {
  id: string;
  name: string;
}

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Minecraft API –∏ —Å–µ—Ä–≤–µ—Ä–æ–º
 */
export class MinecraftService {
  private readonly mojangApiUrl = 'https://api.mojang.com/users/profiles/minecraft';
  private readonly serverHost = config.minecraft.host;
  private readonly rconPort = config.minecraft.rconPort;
  private readonly rconPassword = config.minecraft.rconPassword;
  private readonly statusCheckTimeout = 5000; // –¢–∞–π–º–∞—É—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞ (5 —Å–µ–∫—É–Ω–¥)
  private readonly rconTimeout = 5000; // –¢–∞–π–º–∞—É—Ç –¥–ª—è RCON –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (5 —Å–µ–∫—É–Ω–¥)
  
  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –Ω–∏–∫–Ω–µ–π–º–∞ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ UUID
   * @param nickname –ù–∏–∫–Ω–µ–π–º –∏–≥—Ä–æ–∫–∞
   */
  async getPlayerUUID(nickname: string): Promise<{ exists: boolean; uuid?: string }> {
    try {
      const response = await fetch(`${this.mojangApiUrl}/${encodeURIComponent(nickname)}`);
      
      // –ï—Å–ª–∏ –∏–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω
      if (response.status === 404) {
        return { exists: false };
      }
      
      if (!response.ok) {
        throw new Error(`API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: ${response.status}`);
      }
      
      const data = await response.json() as MojangApiResponse;
      return { exists: true, uuid: this.formatUUID(data.id) };
    } catch (error) {
      logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ UUID –∏–≥—Ä–æ–∫–∞:', error);
      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Å–µ—Ç–∏, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ñ—Ñ–ª–∞–π–Ω-UUID
      return { exists: false, uuid: this.generateOfflineUUID(nickname) };
    }
  }
  
  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ UUID –∏–∑ —Ñ–æ—Ä–º–∞—Ç–∞ –±–µ–∑ –¥–µ—Ñ–∏—Å–æ–≤ –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å –¥–µ—Ñ–∏—Å–∞–º–∏
   * @param uuid UUID –±–µ–∑ –¥–µ—Ñ–∏—Å–æ–≤
   */
  private formatUUID(uuid: string): string {
    return `${uuid.substring(0, 8)}-${uuid.substring(8, 12)}-${uuid.substring(12, 16)}-${uuid.substring(16, 20)}-${uuid.substring(20)}`;
  }
  
  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ñ—Ñ–ª–∞–π–Ω-UUID –¥–ª—è –∏–≥—Ä–æ–∫–∞
   * –ê–ª–≥–æ—Ä–∏—Ç–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç–æ–º—É, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ Minecraft –¥–ª—è –æ—Ñ—Ñ–ª–∞–π–Ω-—Å–µ—Ä–≤–µ—Ä–æ–≤
   * @param nickname –ù–∏–∫–Ω–µ–π–º –∏–≥—Ä–æ–∫–∞
   */
  generateOfflineUUID(nickname: string): string {
    // –°–æ–∑–¥–∞–µ–º MD5 —Ö–µ—à —Å—Ç—Ä–æ–∫–∏ "OfflinePlayer:{nickname}"
    const md5Hash = createHash('md5').update(`OfflinePlayer:${nickname}`).digest('hex');
    
    // –ë–∞–∑–æ–≤—ã–π UUID –±–µ–∑ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–π (–¥–ª—è MD5 —Ö–µ—à–∞)
    const rawUuid = md5Hash;
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ—Ä—Å–∏—é UUID (v3 –¥–ª—è MD5)
    const p1 = rawUuid.substring(0, 8);
    const p2 = rawUuid.substring(8, 12);
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∏—Ç—ã –≤–µ—Ä—Å–∏–∏ (v3 = MD5, –±–∏—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å 0011)
    const p3 = (parseInt(rawUuid.substring(12, 16), 16) & 0x0fff | 0x3000).toString(16);
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç (–±–∏—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å 10xx)
    const p4 = (parseInt(rawUuid.substring(16, 20), 16) & 0x3fff | 0x8000).toString(16);
    const p5 = rawUuid.substring(20, 32);
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–∞–∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π UUID —Å –¥–µ—Ñ–∏—Å–∞–º–∏
    return `${p1}-${p2}-${p3}-${p4}-${p5}`;
  }
  
  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞ Minecraft
   * @returns –û–±—ä–µ–∫—Ç —Å —Ñ–ª–∞–≥–æ–º online –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–µ—Ä–≤–µ—Ä–µ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
   */
  async checkServerStatus(): Promise<{ online: boolean; info?: any }> {
    try {
      logger.info(`–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞ ${this.serverHost}:${this.rconPort}...`);
      const result = await status(this.serverHost, 25565, {
        timeout: this.statusCheckTimeout
      });
      
      return {
        online: true,
        info: {
          version: result.version.name,
          players: {
            online: result.players.online,
            max: result.players.max
          },
          motd: result.motd.clean
        }
      };
    } catch (error) {
      logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞:', error);
      return { online: false };
    }
  }
  
  /**
   * –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã —á–µ—Ä–µ–∑ RCON —Å –º–µ—Ö–∞–Ω–∏–∑–º–æ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
   * @param command –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
   * @param maxRetries –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 3)
   * @param retryDelay –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏ –≤ –º—Å (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 2000)
   * @returns –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã –∏–ª–∏ null –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
   */
  async executeRconCommand(command: string, maxRetries: number = 3, retryDelay: number = 2000): Promise<string | null> {
    let lastError: any = null;
    
    for (let attempt = 1; attempt <= maxRetries; attempt++) {
      let rcon: RCON | null = null;
      
      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞ –ø–µ—Ä–µ–¥ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º
        const status = await this.checkServerStatus();
        if (!status.online) {
          logger.warn(`–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–ø–æ–ø—ã—Ç–∫–∞ ${attempt}/${maxRetries})`);
          lastError = new Error('–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
          
          if (attempt < maxRetries) {
            logger.info(`–û–∂–∏–¥–∞–Ω–∏–µ ${retryDelay}–º—Å –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π...`);
            await new Promise(resolve => setTimeout(resolve, retryDelay));
            continue;
          }
          return null;
        }
        
        // –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ RCON
        rcon = new RCON();
        
        // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É
        await rcon.connect(this.serverHost, this.rconPort);
        
        // –ê–≤—Ç–æ—Ä–∏–∑—É–µ–º—Å—è
        await rcon.login(this.rconPassword);
        
        // –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É
        logger.info(`‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ RCON –∫–æ–º–∞–Ω–¥—ã: ${command} (–ø–æ–ø—ã—Ç–∫–∞ ${attempt}/${maxRetries})`);
        const response = await rcon.execute(command);
        
        logger.info(`‚úÖ RCON –∫–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ: ${command}`);
        return response;
      } catch (error) {
        lastError = error;
        logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ RCON –∫–æ–º–∞–Ω–¥—ã "${command}" (–ø–æ–ø—ã—Ç–∫–∞ ${attempt}/${maxRetries}):`, error);
        
        if (attempt < maxRetries) {
          logger.info(`üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ ${retryDelay}–º—Å...`);
          await new Promise(resolve => setTimeout(resolve, retryDelay));
        }
      } finally {
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –±—ã–ª–æ –æ—Ç–∫—Ä—ã—Ç–æ
        if (rcon) {
          try {
            await rcon.close();
          } catch (closeError) {
            logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ RCON —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:', closeError);
          }
        }
      }
    }
    
    logger.error(`‚ùå –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è RCON –∫–æ–º–∞–Ω–¥—ã "${command}" –∏—Å—á–µ—Ä–ø–∞–Ω—ã. –ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞:`, lastError);
    return null;
  }
  
  /**
   * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞ –≤ –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫ Minecraft-—Å–µ—Ä–≤–µ—Ä–∞
   * @param nickname –ù–∏–∫–Ω–µ–π–º –∏–≥—Ä–æ–∫–∞
   * @param uuid UUID –∏–≥—Ä–æ–∫–∞
   * @param userId ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
   */
  async addToWhitelist(nickname: string, uuid: string, userId?: number): Promise<boolean> {
    try {
      logger.info(`–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞ ${nickname} (${uuid}) –≤ –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞
      const status = await this.checkServerStatus();
      if (!status.online) {
        logger.error('–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∏–≥—Ä–æ–∫–∞ –≤ –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫');
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ not_added –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω userId
        if (userId) {
          const userRepo = new UserRepository();
          await userRepo.updateWhitelistStatus(userId, WhitelistStatus.NOT_ADDED);
        }
        return false;
      }
      
      // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É whitelist add —Å —É–∫–∞–∑–∞–Ω–∏–µ–º UUID
      // –í —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –≤–µ—Ä—Å–∏—è—Ö Minecraft —ç—Ç–æ –≤–∞–∂–Ω–æ, —Ç–∞–∫ –∫–∞–∫ –∏–≥—Ä–æ–∫–∏ –º–æ–≥—É—Ç –º–µ–Ω—è—Ç—å –Ω–∏–∫–∏
      const command = `whitelist add ${nickname}`;
      const response = await this.executeRconCommand(command);
      
      if (!response) {
        throw new Error('–ù–µ –ø–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞');
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã
      const success = response.includes('added to the whitelist') || 
                     response.includes('–¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫');
      
      if (success) {
        logger.info(`–ò–≥—Ä–æ–∫ ${nickname} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫`);
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ added –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω userId
        if (userId) {
          const userRepo = new UserRepository();
          await userRepo.updateWhitelistStatus(userId, WhitelistStatus.ADDED);
        }
      } else {
        logger.warn(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∏–≥—Ä–æ–∫–∞ ${nickname} –≤ –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫: ${response}`);
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ not_added –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω userId
        if (userId) {
          const userRepo = new UserRepository();
          await userRepo.updateWhitelistStatus(userId, WhitelistStatus.NOT_ADDED);
        }
      }
      
      return success;
    } catch (error) {
      logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∏–≥—Ä–æ–∫–∞ –≤ –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫:', error);
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ not_added –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω userId
      if (userId) {
        const userRepo = new UserRepository();
        await userRepo.updateWhitelistStatus(userId, WhitelistStatus.NOT_ADDED);
      }
      return false;
    }
  }
  
  /**
   * –£–¥–∞–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞ –∏–∑ –±–µ–ª–æ–≥–æ —Å–ø–∏—Å–∫–∞ Minecraft-—Å–µ—Ä–≤–µ—Ä–∞
   * @param nickname –ù–∏–∫–Ω–µ–π–º –∏–≥—Ä–æ–∫–∞
   * @param uuid UUID –∏–≥—Ä–æ–∫–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
   * @param userId ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
   */
  async removeFromWhitelist(nickname: string, uuid?: string, userId?: number): Promise<boolean> {
    try {
      if (uuid) {
        logger.info(`–£–¥–∞–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞ ${nickname} (${uuid}) –∏–∑ –±–µ–ª–æ–≥–æ —Å–ø–∏—Å–∫–∞`);
      } else {
        logger.info(`–£–¥–∞–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞ ${nickname} –∏–∑ –±–µ–ª–æ–≥–æ —Å–ø–∏—Å–∫–∞`);
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞
      const status = await this.checkServerStatus();
      if (!status.online) {
        logger.error('–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –∏–≥—Ä–æ–∫–∞ –∏–∑ –±–µ–ª–æ–≥–æ —Å–ø–∏—Å–∫–∞');
        return false;
      }
      
      // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É whitelist remove
      const command = `whitelist remove ${nickname}`;
      const response = await this.executeRconCommand(command);
      
      if (!response) {
        throw new Error('–ù–µ –ø–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞');
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã
      const success = response.includes('removed from the whitelist') || 
                      response.includes('—É–¥–∞–ª–µ–Ω –∏–∑ –±–µ–ª–æ–≥–æ —Å–ø–∏—Å–∫–∞');
      
      if (success) {
        logger.info(`–ò–≥—Ä–æ–∫ ${nickname} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ –±–µ–ª–æ–≥–æ —Å–ø–∏—Å–∫–∞`);
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ removed –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω userId
        if (userId) {
          const userRepo = new UserRepository();
          await userRepo.updateWhitelistStatus(userId, WhitelistStatus.REMOVED);
        }
      } else {
        logger.warn(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏–≥—Ä–æ–∫–∞ ${nickname} –∏–∑ –±–µ–ª–æ–≥–æ —Å–ø–∏—Å–∫–∞: ${response}`);
      }
      
      return success;
    } catch (error) {
      logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏–≥—Ä–æ–∫–∞ –∏–∑ –±–µ–ª–æ–≥–æ —Å–ø–∏—Å–∫–∞:', error);
      return false;
    }
  }
  
  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏–≥—Ä–æ–∫–æ–≤ –≤ –±–µ–ª–æ–º —Å–ø–∏—Å–∫–µ
   * @returns –ú–∞—Å—Å–∏–≤ –∏–º–µ–Ω –∏–≥—Ä–æ–∫–æ–≤ –≤ –±–µ–ª–æ–º —Å–ø–∏—Å–∫–µ –∏–ª–∏ null –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
   */
  async getWhitelistedPlayers(): Promise<string[] | null> {
    try {
      logger.info('–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏–≥—Ä–æ–∫–æ–≤ –≤ –±–µ–ª–æ–º —Å–ø–∏—Å–∫–µ');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞
      const status = await this.checkServerStatus();
      if (!status.online) {
        logger.error('–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤');
        return null;
      }
      
      // –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É whitelist list
      const response = await this.executeRconCommand('whitelist list');
      
      if (!response) {
        throw new Error('–ù–µ –ø–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞');
      }
      
      // –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
      logger.info(`–û—Ç–≤–µ—Ç –æ—Ç –∫–æ–º–∞–Ω–¥—ã 'whitelist list': "${response}"`);
      
      // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º–µ–Ω–∞ –∏–≥—Ä–æ–∫–æ–≤ –∏–∑ –æ—Ç–≤–µ—Ç–∞
      // –ü—Ä–∏–º–µ—Ä—ã —Ñ–æ—Ä–º–∞—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞:
      // "There are X whitelisted players: player1, player2, ..."
      // "–í –±–µ–ª–æ–º —Å–ø–∏—Å–∫–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è X –∏–≥—Ä–æ–∫–æ–≤: player1, player2, ..."
      // "There are 0 whitelisted players"
      // "Whitelist is empty"
      
      const players: string[] = [];
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –æ—Ç–≤–µ—Ç–∞
      let match = response.match(/(?:whitelisted players?\(s\)?:|–Ω–∞—Ö–æ–¥–∏—Ç—Å—è \d+ –∏–≥—Ä–æ–∫–æ–≤?:)\s*(.*)/i);
      
      if (!match) {
        // –ü—Ä–æ–±—É–µ–º –¥—Ä—É–≥–∏–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
        match = response.match(/(?:There are \d+ whitelisted players?\(s\)?:)\s*(.*)/i);
      }
      
      if (!match) {
        // –ü—Ä–æ–±—É–µ–º —Ñ–æ—Ä–º–∞—Ç –±–µ–∑ –¥–≤–æ–µ—Ç–æ—á–∏—è
        match = response.match(/(?:There are \d+ whitelisted players?\(s\)?)\s+(.*)/i);
      }
      
      if (!match) {
        // –ü—Ä–æ–±—É–µ–º –±–æ–ª–µ–µ –æ–±—â–∏–π —Ñ–æ—Ä–º–∞—Ç
        match = response.match(/whitelisted.*?:\s*(.*)/i);
      }
      
      if (match && match[1] && match[1].trim()) {
        // –†–∞–∑–±–∏–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É —Å –∏–º–µ–Ω–∞–º–∏ –∏–≥—Ä–æ–∫–æ–≤ –Ω–∞ –º–∞—Å—Å–∏–≤ –∏ –æ—á–∏—â–∞–µ–º –æ—Ç –ø—Ä–æ–±–µ–ª–æ–≤
        const playerList = match[1].split(',').map(name => name.trim()).filter(name => name.length > 0);
        players.push(...playerList);
      }
      
      logger.info(`–ù–∞–π–¥–µ–Ω–æ –∏–≥—Ä–æ–∫–æ–≤ –≤ whitelist: ${players.length}`);
      if (players.length > 0) {
        logger.info(`–°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤: ${players.join(', ')}`);
      }
      
      return players;
    } catch (error) {
      logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∏–≥—Ä–æ–∫–æ–≤ –≤ –±–µ–ª–æ–º —Å–ø–∏—Å–∫–µ:', error);
      return null;
    }
  }
  
  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ –¥–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º not_added
   */
  async retryFailedWhitelistAdditions(): Promise<void> {
    try {
      logger.info('–ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º not_added');
      
      // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º not_added
      const userRepo = new UserRepository();
      const usersNotInWhitelist = await userRepo.findUsersNotInWhitelist();
      
      if (usersNotInWhitelist.length === 0) {
        logger.info('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º not_added –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        return;
      }
      
      logger.info(`–ù–∞–π–¥–µ–Ω–æ ${usersNotInWhitelist.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º not_added`);
      
      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ whitelist —Å —Å–µ—Ä–≤–µ—Ä–∞
      const whitelistedPlayers = await this.getWhitelistedPlayers();
      
      if (!whitelistedPlayers || whitelistedPlayers.length === 0) {
        logger.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ whitelist —Å —Å–µ—Ä–≤–µ—Ä–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É');
        return;
      }
      
      let retryCount = 0;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      for (const user of usersNotInWhitelist) {
        const isInWhitelist = whitelistedPlayers.some(player => 
          player.toLowerCase() === user.minecraftNickname.toLowerCase()
        );
        
        if (isInWhitelist) {
          // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ whitelist, –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
          logger.info(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.minecraftNickname} —É–∂–µ –≤ whitelist, –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å`);
          await userRepo.updateWhitelistStatus(user.id, WhitelistStatus.ADDED);
        } else {
          // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ whitelist, –ø—ã—Ç–∞–µ–º—Å—è –¥–æ–±–∞–≤–∏—Ç—å
          logger.info(`–ü—ã—Ç–∞–µ–º—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.minecraftNickname} –≤ whitelist`);
          const success = await this.addToWhitelist(user.minecraftNickname, user.minecraftUUID || '', user.id);
          
          if (success) {
            retryCount++;
            logger.info(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.minecraftNickname} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ whitelist –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–µ`);
          } else {
            logger.warn(`–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.minecraftNickname} –≤ whitelist –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–µ`);
          }
        }
      }
      
      logger.info(`–ó–∞–≤–µ—Ä—à–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º not_added. –£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ: ${retryCount}`);
      
    } catch (error) {
      logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º not_added:', error);
    }
  }
}