import { logger } from './logger';

/**
 * –ü—Ä–æ—Å—Ç–æ–π in-memory –∫—ç—à —Å TTL (Time To Live)
 */
export class Cache<T> {
  private cache = new Map<string, { value: T; expires: number }>();
  private defaultTTL: number;

  constructor(defaultTTLSeconds: number = 300) { // 5 –º–∏–Ω—É—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    this.defaultTTL = defaultTTLSeconds * 1000;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –∫—ç—à–∞
   */
  get(key: string): T | null {
    const item = this.cache.get(key);
    
    if (!item) {
      return null;
    }
    
    if (Date.now() > item.expires) {
      this.cache.delete(key);
      return null;
    }
    
    return item.value;
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –∫—ç—à
   */
  set(key: string, value: T, ttlSeconds?: number): void {
    const ttl = ttlSeconds ? ttlSeconds * 1000 : this.defaultTTL;
    const expires = Date.now() + ttl;
    
    this.cache.set(key, { value, expires });
  }

  /**
   * –£–¥–∞–ª–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –∫—ç—à–∞
   */
  delete(key: string): boolean {
    return this.cache.delete(key);
  }

  /**
   * –û—á–∏—Å—Ç–∏—Ç—å –≤–µ—Å—å –∫—ç—à
   */
  clear(): void {
    this.cache.clear();
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∏–ª–∏ –≤—ã—á–∏—Å–ª–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ
   */
  async getOrSet<R extends T>(
    key: string, 
    factory: () => Promise<R>, 
    ttlSeconds?: number
  ): Promise<R> {
    const cached = this.get(key) as R;
    
    if (cached !== null) {
      return cached;
    }
    
    try {
      const value = await factory();
      this.set(key, value, ttlSeconds);
      return value;
    } catch (error) {
      logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –∫—ç—à–∞:', { key, error });
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Ä–∞–∑–º–µ—Ä –∫—ç—à–∞
   */
  size(): number {
    return this.cache.size;
  }

  /**
   * –û—á–∏—Å—Ç–∏—Ç—å –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏
   */
  cleanup(): number {
    const now = Date.now();
    let removed = 0;
    
    for (const [key, item] of this.cache.entries()) {
      if (now > item.expires) {
        this.cache.delete(key);
        removed++;
      }
    }
    
    return removed;
  }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –∫—ç—à–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö
export const applicationCache = new Cache(300); // 5 –º–∏–Ω—É—Ç
export const voteCache = new Cache(60); // 1 –º–∏–Ω—É—Ç–∞
export const userCache = new Cache(600); // 10 –º–∏–Ω—É—Ç

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
let cacheCleanupInterval: NodeJS.Timeout | null = null;

/**
 * –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞
 */
export function startCacheCleanup(): void {
  if (cacheCleanupInterval) {
    return; // –£–∂–µ –∑–∞–ø—É—â–µ–Ω
  }
  
  cacheCleanupInterval = setInterval(() => {
    const removedApps = applicationCache.cleanup();
    const removedVotes = voteCache.cleanup();
    const removedUsers = userCache.cleanup();
    
    if (removedApps + removedVotes + removedUsers > 0) {
      logger.debug(`–û—á–∏—â–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π –∏–∑ –∫—ç—à–∞: –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è=${removedApps}, –≥–æ–ª–æ—Å–∞=${removedVotes}, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏=${removedUsers}`);
    }
  }, 5 * 60 * 1000);
  
  logger.info('‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –∑–∞–ø—É—â–µ–Ω–∞');
}

/**
 * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞
 */
export function stopCacheCleanup(): void {
  if (cacheCleanupInterval) {
    clearInterval(cacheCleanupInterval);
    cacheCleanupInterval = null;
    logger.info('üõë –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –æ—á–∏—Å—Ç–∫—É –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –º–æ–¥—É–ª—è
startCacheCleanup();

/**
 * –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫—ç—à–µ–º
 */
export class CacheUtils {
  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª—é—á –∫—ç—à–∞ –¥–ª—è –∑–∞—è–≤–∫–∏
   */
  static applicationKey(id: number): string {
    return `app:${id}`;
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª—é—á –∫—ç—à–∞ –¥–ª—è –≥–æ–ª–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  static userVoteKey(applicationId: number, voterId: number): string {
    return `user_vote:${applicationId}:${voterId}`;
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª—é—á –∫—ç—à–∞ –¥–ª—è —Å–ø–∏—Å–∫–∞ –≥–æ–ª–æ—Å–æ–≤ –ø–æ –∑–∞—è–≤–∫–µ
   */
  static applicationVotesKey(applicationId: number): string {
    return `votes:${applicationId}`;
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª—é—á –∫—ç—à–∞ –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  static userActiveApplicationsKey(userId: number): string {
    return `user_active_applications:${userId}`;
  }

  /**
   * –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –∑–∞—è–≤–∫–æ–π –∫—ç—à–∏
   */
  static invalidateApplicationCaches(applicationId: number, userId?: number): void {
    // –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫—ç—à –∑–∞—è–≤–∫–∏
    applicationCache.delete(this.applicationKey(applicationId));
    
    // –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫—ç—à –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (userId) {
      applicationCache.delete(this.userActiveApplicationsKey(userId));
    }
    
    // –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –æ–±—â–∏–µ –∫—ç—à–∏
    applicationCache.delete('active_applications');
    applicationCache.delete('voting_applications');
  }

  /**
   * –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∫—ç—à–∏ –≥–æ–ª–æ—Å–æ–≤
   */
  static invalidateVoteCaches(applicationId: number, voterId: number): void {
    // –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫—ç—à –≥–æ–ª–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    voteCache.delete(this.userVoteKey(applicationId, voterId));
    
    // –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫—ç—à –≥–æ–ª–æ—Å–æ–≤ –ø–æ –∑–∞—è–≤–∫–µ
    voteCache.delete(`votes:${applicationId}`);
  }
}