import { UserRepository } from '../db/repositories/userRepository';
import { UserRole, type User } from '../models/types';
import type { MyContext } from '../index';
import { logger } from './logger';

/**
 * –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
 */
export class UserUtils {
  private static userRepository = new UserRepository();

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Telegram ID
   * @param telegramId ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram
   * @returns –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–ª–∏ null
   */
  static async getUserByTelegramId(telegramId: number): Promise<User | null> {
    return await this.userRepository.findByTelegramId(telegramId);
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
   * @param user –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
   * @returns true, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
   */
  static isAdmin(user: User | null): boolean {
    return user?.role === UserRole.ADMIN;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –∏–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
   * @param user –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
   * @returns true, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—á–∞—Å—Ç–Ω–∏–∫ –∏–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
   */
  static isMemberOrAdmin(user: User | null): boolean {
    return user?.role === UserRole.MEMBER || user?.role === UserRole.ADMIN;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å
   * @param user –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
   * @returns true, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å
   */
  static canVote(user: User | null): boolean {
    return user?.canVote === true && this.isMemberOrAdmin(user);
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param user –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
   * @returns –û—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è
   */
  static getDisplayName(user: User): string {
    if (user.username) {
      return `@${user.username}`;
    }
    if (user.minecraftNickname) {
      return user.minecraftNickname;
    }
    return `ID: ${user.telegramId}`;
  }

  /**
   * –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –¥–æ—Å—Ç—É–ø–∞ —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
   * @param ctx –ö–æ–Ω—Ç–µ–∫—Å—Ç
   * @param callerInfo –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–µ—Å—Ç–µ –≤—ã–∑–æ–≤–∞ (—Ñ–∞–π–ª, —Ñ—É–Ω–∫—Ü–∏—è, —Å—Ç—Ä–æ–∫–∞)
   * @param userInfo –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
   */
  static async handleAccessDenied(
    ctx: MyContext, 
    callerInfo: string, 
    userInfo?: { telegramId?: number; username?: string; role?: UserRole }
  ): Promise<void> {
    const logMessage = `üö´ –û—Ç–∫–∞–∑ –≤ –¥–æ—Å—Ç—É–ø–µ | –í—ã–∑–æ–≤ –∏–∑: ${callerInfo}`;
    const userDetails = userInfo 
      ? ` | –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ID=${userInfo.telegramId}, username=${userInfo.username || 'N/A'}, role=${userInfo.role || 'N/A'}`
      : ' | –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω';
    
    logger.warn(logMessage + userDetails);
    await ctx.reply('‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.');
  }

  /**
   * Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
   * @param ctx –ö–æ–Ω—Ç–µ–∫—Å—Ç
   * @param next –°–ª–µ–¥—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
   */
  static async requireAdmin(ctx: MyContext, next: () => Promise<void>): Promise<void> {
    if (!ctx.from) {
      await ctx.reply('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.');
      return;
    }

    const user = await this.getUserByTelegramId(ctx.from.id);
    
    if (!this.isAdmin(user)) {
      await this.handleAccessDenied(
        ctx, 
        'UserUtils.requireAdmin', 
        { telegramId: ctx.from.id, username: ctx.from.username, role: user?.role }
      );
      return;
    }
    
    await next();
  }

  /**
   * Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
   * @param ctx –ö–æ–Ω—Ç–µ–∫—Å—Ç
   * @param next –°–ª–µ–¥—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
   */
  static async requireMemberOrAdmin(ctx: MyContext, next: () => Promise<void>): Promise<void> {
    if (!ctx.from) {
      await ctx.reply('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.');
      return;
    }

    const user = await this.getUserByTelegramId(ctx.from.id);
    
    if (!this.isMemberOrAdmin(user)) {
      await this.handleAccessDenied(
        ctx, 
        'UserUtils.requireMemberOrAdmin', 
        { telegramId: ctx.from.id, username: ctx.from.username, role: user?.role }
      );
      return;
    }
    
    await next();
  }

  /**
   * Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
   * @param ctx –ö–æ–Ω—Ç–µ–∫—Å—Ç
   * @param next –°–ª–µ–¥—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
   */
  static async requireVotingRights(ctx: MyContext, next: () => Promise<void>): Promise<void> {
    if (!ctx.from) {
      await ctx.reply('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.');
      return;
    }

    const user = await this.getUserByTelegramId(ctx.from.id);
    
    if (!this.canVote(user)) {
      await ctx.reply('‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤–∞ –≥–æ–ª–æ—Å–∞.');
      return;
    }
    
    await next();
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏
   * @param role –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @returns –°—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–ª–∏
   */
  static getRoleDisplayName(role: UserRole): string {
    const roleMap = {
      [UserRole.ADMIN]: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
      [UserRole.MEMBER]: '–£—á–∞—Å—Ç–Ω–∏–∫',
      [UserRole.APPLICANT]: '–ó–∞—è–≤–∏—Ç–µ–ª—å'
    };
    return roleMap[role] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ä–æ–ª—å';
  }
}