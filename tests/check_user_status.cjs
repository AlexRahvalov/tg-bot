const mariadb = require('mariadb');

async function checkUserStatus() {
  const pool = mariadb.createPool({
    host: 'localhost',
    port: 3306,
    user: 'root',
    password: 'ga540012',
    database: 'minecraft_bot',
    connectionLimit: 5
  });
  
  let connection;

  try {
    connection = await pool.getConnection();
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    
    // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è oksana_rahvalova (–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π username)
    const users = await connection.query(
      `SELECT id, telegram_id, username, minecraft_nickname, role, can_vote, reputation 
       FROM users 
       WHERE username = 'oksana_rahvalova' OR minecraft_nickname LIKE '%oksana%' OR telegram_id = 1015554804`
    );
    
    console.log('\n=== –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–û–ò–°–ö–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ===');
    
    if (users.length === 0) {
      console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å oksanahvalova –Ω–µ –Ω–∞–π–¥–µ–Ω');
      
      // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
      const allUsers = await connection.query(
        'SELECT id, telegram_id, username, minecraft_nickname, role, can_vote FROM users ORDER BY id DESC LIMIT 10'
      );
      
      console.log('\n=== –ü–û–°–õ–ï–î–ù–ò–ï 10 –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô –í –°–ò–°–¢–ï–ú–ï ===');
      allUsers.forEach(user => {
        console.log(`ID: ${user.id}, TG: ${user.telegram_id}, Username: ${user.username}, Minecraft: ${user.minecraft_nickname}, Role: ${user.role}, CanVote: ${user.can_vote}`);
      });
    } else {
      users.forEach(user => {
        console.log(`\nüë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω:`);
        console.log(`  ID: ${user.id}`);
        console.log(`  Telegram ID: ${user.telegram_id}`);
        console.log(`  Username: ${user.username}`);
        console.log(`  Minecraft: ${user.minecraft_nickname}`);
        console.log(`  –†–æ–ª—å: ${user.role}`);
        console.log(`  –ü—Ä–∞–≤–æ –≥–æ–ª–æ—Å–∞: ${user.can_vote}`);
        console.log(`  –†–µ–ø—É—Ç–∞—Ü–∏—è: ${user.reputation}`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏–∫—É –ø—Ä–∞–≤
        const hasVotingRights = user.can_vote === 1 && (user.role === 'member' || user.role === 'admin');
        console.log(`  –ú–æ–∂–µ—Ç –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å/–æ—Ü–µ–Ω–∏–≤–∞—Ç—å: ${hasVotingRights ? '‚úÖ –î–ê' : '‚ùå –ù–ï–¢'}`);
        
        if (!hasVotingRights) {
          if (user.can_vote !== 1) {
            console.log(`    ‚ùå –ü—Ä–æ–±–ª–µ–º–∞: can_vote = ${user.can_vote} (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 1)`);
          }
          if (user.role !== 'member' && user.role !== 'admin') {
            console.log(`    ‚ùå –ü—Ä–æ–±–ª–µ–º–∞: role = '${user.role}' (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 'member' –∏–ª–∏ 'admin')`);
          }
        }
      });
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
  } finally {
    if (connection) {
      await connection.end();
      console.log('\nüîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ');
    }
    if (pool) {
      await pool.end();
    }
  }
}

checkUserStatus();