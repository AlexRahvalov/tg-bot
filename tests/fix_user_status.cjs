const mariadb = require('mariadb');

async function fixUserStatus() {
  const pool = mariadb.createPool({
    host: 'localhost',
    port: 3306,
    user: 'root',
    password: 'ga540012',
    database: 'minecraft_bot',
    connectionLimit: 5
  });
  
  let connection;

  try {
    connection = await pool.getConnection();
    console.log('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ');
    
    // –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    await connection.beginTransaction();
    
    // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å UUID –Ω–æ —Å—Ç–∞—Ç—É—Å–æ–º applicant
    const users = await connection.query(
      `SELECT id, telegram_id, username, nickname, minecraft_nickname, minecraft_uuid, role, can_vote 
       FROM users 
       WHERE role = 'applicant' AND minecraft_uuid IS NOT NULL AND minecraft_uuid != ''`
    );
    
    if (users.length === 0) {
      console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º applicant –∏ UUID –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.');
      await connection.rollback();
      return;
    }
    
    console.log(`\n–ù–∞–π–¥–µ–Ω–æ ${users.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º applicant –∏ UUID:`);
    
    for (const user of users) {
      console.log(`\n–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:`);
      console.log(`  ID: ${user.id}`);
      console.log(`  Telegram ID: ${user.telegram_id}`);
      console.log(`  Username: ${user.username}`);
      console.log(`  Nickname: ${user.nickname}`);
      console.log(`  Minecraft Nickname: ${user.minecraft_nickname}`);
      console.log(`  Minecraft UUID: ${user.minecraft_uuid}`);
      console.log(`  –¢–µ–∫—É—â–∞—è —Ä–æ–ª—å: ${user.role}`);
      console.log(`  –ü—Ä–∞–≤–æ –≥–æ–ª–æ—Å–∞: ${user.can_vote}`);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ member –∏ –¥–∞–µ–º –ø—Ä–∞–≤–æ –≥–æ–ª–æ—Å–∞
      const updateResult = await connection.query(
        `UPDATE users SET role = 'member', can_vote = 1 WHERE id = ?`,
        [user.id]
      );
      
      console.log(`  –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: affectedRows = ${updateResult.affectedRows}`);
      
      if (updateResult.affectedRows > 0) {
        console.log(`  ‚úÖ –°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ 'member' —Å –ø—Ä–∞–≤–æ–º –≥–æ–ª–æ—Å–∞`);
      } else {
        console.log(`  ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è`);
        throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID ${user.id}`);
      }
    }
    
    // –ö–æ–º–º–∏—Ç–∏–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    await connection.commit();
    console.log('\n‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∞');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ—Å–ª–µ –∫–æ–º–º–∏—Ç–∞
    console.log('\n=== –ü–†–û–í–ï–†–ö–ê –ü–û–°–õ–ï –û–ë–ù–û–í–õ–ï–ù–ò–Ø ===');
    const updatedUsers = await connection.query(
      `SELECT id, telegram_id, username, role, can_vote, minecraft_uuid FROM users WHERE minecraft_uuid IS NOT NULL AND minecraft_uuid != ''`
    );
    
    for (const user of updatedUsers) {
      console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID ${user.id} (${user.username}): —Ä–æ–ª—å = ${user.role}, –≥–æ–ª–æ—Å = ${user.can_vote}, UUID = ${user.minecraft_uuid}`);
    }
    
    console.log('\nüèÅ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ whitelist.');
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö:', error);
    if (connection) {
      try {
        await connection.rollback();
        console.log('–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞');
      } catch (rollbackError) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–∞—Ç–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', rollbackError);
      }
    }
    throw error;
  } finally {
    if (connection) connection.release();
    await pool.end();
  }
}

fixUserStatus().catch(console.error);